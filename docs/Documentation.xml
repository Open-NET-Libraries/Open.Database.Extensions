<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Open.Database.Extensions</name>
    </assembly>
    <members>
        <member name="T:Open.Database.Extensions.DbConnectionFactory`1">
            <summary>
            Generic connection factory implementation that accepts a factory function.
            </summary>
            <typeparam name="TConnection"></typeparam>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory`1.#ctor(System.Func{`0})">
            <summary>
            Constructs a DbConnectionFactory.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory`1.Create">
            <summary>
            Creates a connection of from the underlying factory function. 
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.DbConnectionFactory">
            <summary>
            DbConnection factory implementation that accepts a factory function.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory.#ctor(System.Func{System.Data.Common.DbConnection})">
            <summary>
            Constructs a DbConnectionFactory.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommandBase`4">
            <summary>
            Base class for developing expressive commands.
            Includes methods for use with IDbConnection and IDbCommand types.
            </summary>
            <typeparam name="TConnection">The type of the connection to be used.</typeparam>
            <typeparam name="TCommand">The type of the commands generated by the connection.</typeparam>
            <typeparam name="TDbType">The DB type enum to use for parameters.</typeparam>
            <typeparam name="TThis">The type of this class in order to facilitate proper expressive notation.</typeparam>
        </member>
        <member name="F:Open.Database.Extensions.ExpressiveCommandBase`4.ConnectionFactory">
            <summary>
            The connection factory to use to generate connections and commands.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.ExpressiveCommandBase`4.Connection">
            <summary>
            The connection to execute commands on if not using a connection factory.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.ExpressiveCommandBase`4.Transaction">
            <summary>
            The transaction to execute commands on if not using a connection factory.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.#ctor(Open.Database.Extensions.IDbConnectionFactory{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param})">
            <param name="connFactory">The factory to generate connections from.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.#ctor(`0,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param})">
            <param name="connection">The connection to execute the command on.</param>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Command">
            <summary>
            The command text or procedure name to use.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Type">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Params">
            <summary>
            The list of params to apply to the command before execution.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Timeout">
            <summary>
            The command timeout value.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam(System.String,System.Object,`2)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam(System.String,System.Object)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam``1(System.String,System.Nullable{``0},`2)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam``1(System.String,System.Nullable{``0})">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam(System.String)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParamIf``1(System.Boolean,System.String,System.Nullable{``0})">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParamIf(System.Boolean,System.String,System.Object)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParamIf(System.Boolean,System.String,System.Object,`2)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParamIf``1(System.Boolean,System.String,System.Nullable{``0},`2)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParamIf(System.Boolean,System.String)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.SetTimeout(System.UInt16)">
            <summary>
            Sets the timeout value.
            </summary>
            <param name="seconds">The number of seconds to wait before the connection times out.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParams(`1)">
            <summary>
            Handles adding the list of parameters to a new command.
            </summary>
            <param name="command">The command to add parameters to.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.UsingConnection(System.Action{`0,System.Data.IDbTransaction})">
            <summary>
            Handles providing the connection for use with the command.
            </summary>
            <param name="action">The handler for use with the connection.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.UsingConnection``1(System.Func{`0,System.Data.IDbTransaction,``0})">
            <summary>
            Handles providing the connection for use with the command.
            </summary>
            <param name="action">The handler for use with the connection.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Execute(System.Action{`1})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="action">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Execute``1(System.Func{`1,``0})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteReturn">
            <summary>
            Calls ExecuteNonQuery on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteReturn``1">
            <summary>
            Calls ExecuteNonQuery on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteReader(System.Action{System.Data.IDataReader},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteReader``1(System.Func{System.Data.IDataReader,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReader(System.Action{System.Data.IDataRecord})">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReaderWhile(System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            Iterates a reader on a command while the handler function returns true.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReader``2(System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="TEntity">The return type of the transform function applied to each record.</typeparam>
            <typeparam name="TResult">The type returned by the selector.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="selector">Provides an IEnumerable&lt;TEntity&gt; to select individual results by.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.First``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Throws if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.FirstOrDefault``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Returns default(T) if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Single``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates a IDataReader and returns the first result through a transform funciton.  Throws if none or more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.SingleOrDefault``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Returns default(T) if none.  Throws if more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Take``1(System.Int32,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="count">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The results from the transform limited by the take count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Skip``1(System.Int32,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and skips the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="count">The number of records to skip.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The results from the transform after the skip count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.SkipThenTake``1(System.Int32,System.Int32,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and skips by the skip parameter returns the maximum remaining defined by the take parameter.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="skip">The number of entries to skip before starting to take results.</param>
            <param name="take">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The results from the skip, transform and take operation.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteNonQuery">
            <summary>
            Calls ExecuteNonQuery on the underlying command.
            </summary>
            <returns>The integer response from the method. (Records updated.)</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteScalar">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <returns>The varlue returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteScalar``1">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The varlue returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteScalar``1(System.Func{System.Object,``0})">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The varlue returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.LoadTable">
            <summary>
            Imports all data using an IDataReader into a DataTable.
            </summary>
            <returns>The resultant DataTabel.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.LoadTables">
            <summary>
            Loads all data from a command through an IDataReader into a DataTables.
            Calls .NextResult() to check for more results.
            </summary>
            <returns>The resultant list of DataTables.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ToList``1(System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Converts all IDataRecords into a list using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="transform">The transform function.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ToArray``1(System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Converts all IDataRecords into an array using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="transform">The transform function.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The array of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the results.
            DBNull values are left unchanged (retained).
            </summary>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.Int32,System.Int32[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="columnNames">The column names to select.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.String,System.String[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Results``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Results``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.FirstOrdinalResults">
            <summary>
            Reads the first column from every record and returns the results as a list..
            DBNull values are converted to null.
            </summary>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.FirstOrdinalResults``1">
            <summary>
            Reads the first column from every record..
            DBNull values are converted to null.
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Results``1(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ToTargetBlock``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Posts all records to a target block using the transform function.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="transform">The transform function.</param>
            <param name="target">The target block to receive the results (to be posted to).</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AsSourceBlock``1(System.Func{System.Data.IDataRecord,``0},System.Boolean)">
            <summary>
            Returns a buffer block that will contain the results.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="transform">The transform function.</param>
            <param name="synchronousExecution">By default the command is deferred.
            If set to true, the command runs synchronusly and all data is acquired before the method returns.
            If set to false (default) the data is recieved asynchronously (deferred: data will be subsequently posted) and the source block (transform) can be completed early.</param>
            <returns>The buffer block that will contain the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AsSourceBlock``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Boolean)">
            <summary>
            Provides a transform block as the source of records.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="synchronousExecution">By default the command is deferred.
            If set to true, the command runs synchronusly and all data is acquired before the method returns.
            If set to false (default) the data is recieved asynchronously (data will be subsequently posted) and the source block (transform) can be completed early.</param>
            <returns>A transform block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AsSourceBlock``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Provides a transform block as the source of records.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="synchronousExecution">By default the command is deferred.
            If set to true, the command runs synchronusly and all data is acquired before the method returns.
            If set to false (default) the data is recieved asynchronously (data will be subsequently posted) and the source block (transform) can be completed early.</param>
            <returns>A transform block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AsSourceBlock``1(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Provides a transform block as the source of records.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A transform block that is recieving the results.</returns>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommandBase`4.Param">
            <summary>
            A struct that represents the param to be created when the command is exectued.
            TDbType facillitates the difference between DbType and SqlDbType.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Name">
            <summary>
            The name of the param.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Value">
            <summary>
            The value of the param.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Type">
            <summary>
            The DbType of the param.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Equals(System.Object)">
            <summary>
            Determines whether the specified param is equal to the current one.
            </summary>
            <param name="obj">Param to compare against.</param>
            <returns>True if properties are equal.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Param.op_Equality(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param,Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Param.op_Inequality(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param,Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveDbCommand">
            <summary>
            An abstraction for executing commands on a database using best practices and simplified expressive syntax.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(Open.Database.Extensions.IDbConnectionFactory{System.Data.Common.DbConnection},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <param name="connFactory">The factory to generate connections from.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <param name="connection">The connection to execute the command on.</param>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.AddParams(System.Data.Common.DbCommand)">
            <summary>
            Handles adding the list of parameters to a new command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveDbCommandBase`4">
            <summary>
            An base class for executing commands on a database using best practices and simplified expressive syntax.
            Includes methods for use with DbConnection and DbCommand types.
            </summary>
            <typeparam name="TConnection">The type of the connection to be used.</typeparam>
            <typeparam name="TCommand">The type of the commands generated by the connection.</typeparam>
            <typeparam name="TDbType">The DB type enum to use for parameters.</typeparam>
            <typeparam name="TThis">The type of this class in order to facilitate proper expressive notation.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.#ctor(Open.Database.Extensions.IDbConnectionFactory{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param})">
            <param name="connFactory">The factory to generate connections from.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.#ctor(`0,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param})">
            <param name="connection">The connection to execute the command on.</param>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="F:Open.Database.Extensions.ExpressiveDbCommandBase`4.UseAsyncRead">
            <summary>
            By default (false), for async methods, the underlying iteration operation for a reader will be .Read() whenever possible.  If set to true, .ReadAsync() will be used.
            Using .ReadAsync() can introduce unexpected latency and additional CPU overhead.
            This should only be set to true if there is a clear reason why and should be profiled before and after.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.EnableAsyncRead(System.Boolean)">
            <summary>
            Sets the UseAsyncRead value.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.ExpressiveDbCommandBase`4.CancellationToken">
            <summary>
            The optional cancellation token to use with supported methods.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.UseCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Sets the UseAsyncRead value.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteAsync(System.Func{`1,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteAsync``1(System.Func{`1,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteReturnAsync">
            <summary>
            Calls ExecuteNonQueryAsync on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteReturnAsync``1">
            <summary>
            Calls ExecuteNonQueryAsync on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteReaderAsync(System.Action{System.Data.Common.DbDataReader},System.Data.CommandBehavior)">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteReaderAsync(System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.Task},System.Data.CommandBehavior)">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteReaderAsync``1(System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandBehavior)">
            <summary>
            Asynchronously executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteReaderAsync``1(System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.Task{``0}},System.Data.CommandBehavior)">
            <summary>
            Asynchronously executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteNonQueryAsync">
            <summary>
            Calls ExecuteNonQueryAsync on the underlying command.
            </summary>
            <returns>The integer responise from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteScalarAsync">
            <summary>
            Calls ExecuteScalarAsync on the underlying command.
            </summary>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteScalarAsync``1(System.Func{System.Object,``0})">
            <summary>
            Asynchronously executes scalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <param name="transform">The transform function for the result.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteScalarAsync``1">
            <summary>
            Asynchronously executes scalar on the underlying command and casts to the expected type.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ExecuteScalarAsync``1(System.Func{System.Object,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously executes scalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <param name="transform">The transform function (task) for the result.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.IterateReaderAsync(System.Action{System.Data.IDataRecord},System.Data.CommandBehavior)">
            <summary>
            Iterates asynchronously and will stop iterating if canceled.
            </summary>
            <param name="handler">The active IDataRecord is passed to this handler.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.IterateReaderWhileAsync(System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Iterates asynchronously until the handler returns false.  Then cancels.
            </summary>
            <param name="predicate">If true, the iteration continues.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The task that completes when the iteration is done or the predicate evaluates false.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.IterateReaderWhileAsync(System.Func{System.Data.IDataRecord,System.Threading.Tasks.Task{System.Boolean}},System.Data.CommandBehavior)">
            <summary>
            Iterates asynchronously until the handler returns false.  Then cancels.
            </summary>
            <param name="predicate">If true, the iteration continues.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The task that completes when the iteration is done or the predicate evaluates false.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.TakeAsync``1(System.Func{System.Data.IDataRecord,``0},System.Int32,System.Data.CommandBehavior)">
            <summary>
            Asynchronously iterates a IDataReader and returns the each result until the count is met.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="count">The maximum number of records before complete.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.FirstOrdinalResultsAsync">
            <summary>
            Reads the first column from every record and returns the results as a list..
            DBNull values are converted to null.
            </summary>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.FirstOrdinalResultsAsync``1">
            <summary>
            Reads the first column from every record..
            DBNull values are converted to null.
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.RetrieveAsync(System.Int32,System.Int32[])">
            <summary>
            Asynchronously iterates all records within the current result set using an IDataReader and returns the desired results.
            </summary>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.RetrieveAsync(System.String,System.String[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            </summary>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ToTargetBlockAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Posts all transformed records to the provided target block.
            If .Complete is called on the target block, then the iteration stops.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="target">The target block to receive the records.</param>
            <returns>A task that is complete once there are no more results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.AsSourceBlockAsync``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Provides a BufferBlock as the source of records.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A buffer block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.AsSourceBlockAsync``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns a source block as the source of records.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A transform block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.AsSourceBlockAsync``1(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Returns a source block as the source of records.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A transform block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ToListAsync``1(System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Asynchronously returns all records via a transform function.
            </summary>
            <param name="transform">The desired column names.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ResultsAsync``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ResultsAsync``1(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.AsSourceBlockAsync``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Returns a source block as the source of records.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A transform block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.RetrieveAsync">
            <summary>
            Asynchronously iterates all records within the first result set using an IDataReader and returns the results.
            </summary>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.RetrieveAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Asynchronously iterates all records within the current result set using an IDataReader and returns the desired results.
            </summary>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.RetrieveAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="columnNames">The column names to select.</param>
            <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`4.ResultsAsync``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="T:Open.Database.Extensions.Extensions">
            <summary>
            Core non-DB-specific extensions for building a command and retrieving data using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Using``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,``1})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Using``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Action{``0})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Using``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Using``1(System.Func{``0},System.Action{``0})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.UsingAsync``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.UsingAsync``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.UsingAsync``2(System.Func{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.UsingAsync``1(System.Func{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Generates a connection and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Open``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,``1})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Open``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Action{``0})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Open``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Open``1(System.Func{``0},System.Action{``0})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.OpenAsync``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.OpenAsync``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.OpenAsync``2(System.Func{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.OpenAsync``1(System.Func{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Generates a connection, opens it, and executes the action within a using statement.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConn">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Command(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveDbCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Command(System.Data.Common.DbTransaction,System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveDbCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The transaction to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.StoredProcedure(System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates an ExpressiveDbCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.StoredProcedure(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Creates an ExpressiveDbCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The transaction to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Command(Open.Database.Extensions.IDbConnectionFactory{System.Data.Common.DbConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveDbCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.StoredProcedure(Open.Database.Extensions.IDbConnectionFactory{System.Data.Common.DbConnection},System.String)">
            <summary>
            Creates an ExpressiveDbCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Command(System.Func{System.Data.Common.DbConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveDbCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.StoredProcedure(System.Func{System.Data.Common.DbConnection},System.String)">
            <summary>
            Creates an ExpressiveDbCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an IDbCommand from any IDbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateTextCommand(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text IDbCommand from any IDbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateStoredProcedureCommand(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating an IDbCommand from any IDbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateCommand(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an DbCommand from any DbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateTextCommand(System.Data.Common.DbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text DbCommand from any DbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateStoredProcedureCommand(System.Data.Common.DbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure DbCommand from any DbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateCommand(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an IDbCommand from any IDbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateTextCommand(System.Data.IDbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text IDbCommand from any IDbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateStoredProcedureCommand(System.Data.IDbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure IDbCommand from any IDbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateCommand(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an DbCommand from any DbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateTextCommand(System.Data.Common.DbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text DbCommand from any DbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateStoredProcedureCommand(System.Data.Common.DbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure DbCommand from any DbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.DBNullToNull(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Any DBNull values are converted to null.
            </summary>
            <param name="values">The source values.</param>
            <returns>The converted enumerable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.DBNullToNull(System.Object[])">
            <summary>
            Returns a copy of this array with any DBNull values converted to null.
            </summary>
            <param name="values">The source values.</param>
            <returns>A new array containing the results with.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ReplaceDBNullWithNull(System.Object[])">
            <summary>
            Replaces any DBNull values in the array with null;
            </summary>
            <param name="values">The source values.</param>
            <returns>The converted enumerable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.EnsureOpen(System.Data.IDbConnection)">
            <summary>
            If the connection isn't open, opens the connection.
            If the connection is in neither open or close, first closes the connection.
            </summary>
            <returns>The prior connection state.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.EnsureOpenAsync(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            If the connection isn't open, opens the connection.
            If the connection is in neither open or close, first closes the connection.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">An optional token to cancel opening.</param>
            <param name="configureAwait">If true (default) will retain the context after opening.</param>
            <returns>A task containing the prior connection state.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Shortcut for adding command parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Shortcut for adding command parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The DbType of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddParameterType(System.Data.IDbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Shortcut for adding command a typed (non-input) parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The DbType of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddReturnParameter(System.Data.IDbCommand,System.Data.DbType,System.String)">
            <summary>
            Shortcut for adding command a typed return parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The DbType of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddReturnParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Shortcut for adding command a return parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ForEach(System.Data.IDataReader,System.Action{System.Data.IDataRecord})">
            <summary>
            Iterates all records from an IDataReader.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ForEachAsync(System.Data.Common.DbDataReader,System.Action{System.Data.IDataRecord},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Iterates all records from an IDataReader.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ForEachAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Iterates all records from an IDataReader.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.GetNames(System.Data.IDataRecord)">
            <summary>
            Returns all the column names for the current result set.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <returns>The array of column names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.GetOrdinalMapping(System.Data.IDataRecord)">
            <summary>
            Returns the (name,ordinal) mapping for current result set.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <returns>The array of mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.GetOrdinalMapping(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an array of name to ordinal mappings.
            </summary>
            <param name="record">The IDataRecord to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <param name="sort">If true, will order the results by ordinal ascending.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.GetValuesFromOrdinals(System.Data.IDataRecord,System.Int32[])">
            <summary>
            Produces a selective set of column values based upon the desired ordinal positions.
            </summary>
            <param name="record">The IDataRecord to query.</param>
            <param name="ordinals">The set of ordinals to query.</param>
            <returns>An array of values matching the ordinal positions requested.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.GetMatchingOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an array of name to ordinal mappings.
            </summary>
            <param name="record">The IDataRecord to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <param name="sort">If true, will order the results by ordinal ascending.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.GetDataTypeNames(System.Data.IDataRecord)">
            <summary>
            Returns all the data type names for the columns of current result set.
            </summary>
            <param name="reader">The reader to get data type names from.</param>
            <returns>The array of data type names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AsEnumerable(System.Data.IDataReader)">
            <summary>
            Enumerates all the remaining values of the current result set of a data reader.
            DBNull values are retained.
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <returns>An enumeration of the values returned from a data reader.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AsEnumerable(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Enumerates all the remaining values of the current result set of a data reader.
            DBNull values are retained.
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <param name="ordinals">The limited set of ordinals to include.  If none are specified, the returned objects will be empty.</param>
            <returns>An enumeration of the values returned from a data reader.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AsEnumerable(System.Data.IDataReader,System.Int32,System.Int32[])">
            <summary>
            Enumerates all the remaining values of the current result set of a data reader.
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>An enumeration of the values returned from a data reader.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AsEnumerable(System.Data.DataColumnCollection)">
            <summary>
            Generic enumerable extension for DataColumnCollection.
            </summary>
            <param name="columns">The column collection.</param>
            <returns>An enumerable of DataColumns.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AsEnumerable(System.Data.DataRowCollection)">
            <summary>
            Generic enumerable extension for DataRowCollection.
            </summary>
            <param name="rows">The row collection.</param>
            <returns>An enumerable of DataRows.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.To``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Boolean)">
            <summary>
            Loads all data into a queue before iterating (dequeing) the results as type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="table">The DataTable to read from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="clearSourceTable">Clears the source table before providing the enumeration.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.To``1(System.Data.DataTable,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Loads all data into a queue before iterating (dequeing) the results as type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="table">The DataTable to read from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.To``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Loads all data into a queue before iterating (dequeing) the results as type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="table">The DataTable to read from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="clearSourceTable">Clears the source table before providing the enumeration.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Iterate``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Iterates all records from an IDataReader.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToList``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Shortcut for .Iterate(transform).ToList();
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>A list of the transformed results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToListAsync``1(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The SqlDataReader to read from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToListAsync``1(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The SqlDataReader to read from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToListAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Threading.Tasks.Task{``0}},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToListAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToArray``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Shortcut for .Iterate(transform).ToArray();
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>An array of the transformed results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToList``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>A list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToList``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToArray``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>A list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToArray``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            Loads all remaining data from an IDataReader into a DataTable.
            </summary>
            <param name="reader">The IDataReader to load data from.</param>
            <returns>The resultant DataTable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDataTables(System.Data.IDataReader)">
            <summary>
            Loads all data from a command through an IDataReader into a DataTables.
            Calls .NextResult() to check for more results.
            </summary>
            <param name="reader">The IDataReader to load data from.</param>
            <returns>The resultant list of DataTables.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDataTable(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Loads all data from a command through an IDataReader into a DataTable.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The resultant DataTable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDataTables(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Loads all data from a command through an IDataReader into a DataTables.
            Calls .NextResult() to check for more results.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The resultant list of DataTables.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            Iterates an IDataReader while the predicate returns true.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="predicate">The handler function that processes each IDataRecord and decides if iteration should continue.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReader(System.Data.IDbCommand,System.Action{System.Data.IDataReader},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReader``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Action{System.Data.Common.DbDataReader},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.Task},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReaderAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReaderAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.Task{``0}},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReader``2(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="TEntity">The return type of the transform function applied to each record.</typeparam>
            <typeparam name="TResult">The type returned by the selector.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="selector">Provides an IEnumerable&lt;TEntity&gt; to select individual results by.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReader``2(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="TEntity">The return type of the transform function applied to each record.</typeparam>
            <typeparam name="TResult">The type returned by the selector.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="selector">Provides an IEnumerable&lt;TEntity&gt; to select individual results by.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReader(System.Data.IDbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReader(System.Data.IDbCommand,System.Data.CommandBehavior,System.Action{System.Data.IDataRecord})">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReaderWhile(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader on a command while the predicate returns true.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="predicate">The handler function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously iterates all records from an IDataReader.
            </summary>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously iterates all records from an IDataReader.
            </summary>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateWhileAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.Task{System.Boolean}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously iterates an IDataReader while the predicate returns true.
            </summary>
            <param name="reader">The DbDataReader to load data from.</param>
            <param name="predicate">The handler function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="token">Optional cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateWhileAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously iterates an IDataReader on a command while the predicate returns true.
            </summary>
            <param name="reader">The DbDataReader to load data from.</param>
            <param name="predicate">The handler function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReaderWhileAsync(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously iterates an IDataReader on a command while the predicate returns true.
            </summary>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="predicate">The handler function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReaderWhileAsync(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Threading.Tasks.Task{System.Boolean}},System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously iterates an IDataReader on a command while the predicate returns true.
            </summary>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="predicate">The handler function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.First``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Throws if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrDefault``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Returns default(T) if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Single``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Throws if none or more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.SingleOrDefault``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and returns the first result through a transform funciton.  Returns default(T) if none.  Throws if more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Take``1(System.Data.IDbCommand,System.Int32,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and returns the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="count">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The results from the transform limited by the take count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Skip``1(System.Data.IDbCommand,System.Int32,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and skips the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="count">The number of records to skip.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The results from the transform after the skip count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.SkipThenTake``1(System.Data.IDbCommand,System.Int32,System.Int32,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader and skips by the skip parameter returns the maximum remaining defined by the take parameter.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="skip">The number of entries to skip before starting to take results.</param>
            <param name="take">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The results from the skip, transform and take operation.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            DBNull values are converted to null.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnMap">The column ids and resultant names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.String}})">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            DBNull values are converted to null.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnMap">The column ids and resultant names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.ISet{System.String})">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            DBNull values are converted to null.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.String[])">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            DBNull values are converted to null.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnNames">The column names to query.  If none specified, the result will contain all columns.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            DBNull values are converted to null.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.DequeueEach``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Useful extension for dequeuing items from a queue.
            Not thread safe but queueing/dequeueing items in between items is supported.
            </summary>
            <typeparam name="T">Return type of the source queue</typeparam>
            <returns>An enumerable of the items contained within the queue.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResults(System.Data.IDataReader)">
            <summary>
            Reads the first column values from every record.
            DBNull values are then converted to null.
            </summary>
            <returns>The enumerable first ordinal values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResults``1(System.Data.IDataReader)">
            <summary>
            Reads the first column values from every record.
            Any DBNull values are then converted to null and casted to type T0;
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResults``1(System.Data.Common.DbDataReader)">
            <summary>
            Reads the first column values from every record.
            Any DBNull values are then converted to null and casted to type T0;
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResults(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Reads the first column values from every record.
            DBNull values are then converted to null.
            </summary>
            <returns>The enumerable first ordinal values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResults``1(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Reads the first column values from every record.
            Any DBNull values are then converted to null and casted to type T0;
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResults``1(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Reads the first column values from every record.
            Any DBNull values are then converted to null and casted to type T0;
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResultsAsync(System.Data.Common.DbDataReader,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Reads the first column values from every record.
            DBNull values are converted to null.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The list of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbDataReader,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Reads the first column values from every record.
            Any DBNull values are then converted to null and casted to type T0;
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResultsAsync(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Reads the first column values from every record.
            DBNull values are converted to null.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The list of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Reads the first column from every record..
            Any DBNull values are then converted to null and casted to type T0;
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToTargetBlock``1(System.Data.IDataReader,System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader through the transform function and posts each record to the target block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="target">The target block to receivethe results.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToTargetBlockAsync``1(System.Data.Common.DbDataReader,System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Func{System.Data.IDataRecord,``0},System.Boolean)">
            <summary>
            Asynchronously iterates an IDataReader and through the transform function and posts each record it to the target block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The SqlDataReader to read from.</param>
            <param name="target">The target block to receive the results.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToTargetBlockAsync``1(System.Data.Common.DbCommand,System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Asynchronously iterates an IDataReader and through the transform function and posts each record it to the target block.
            If a connection is desired to remain open after completion, you must open the connection before calling this method.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The DbCommand to generate a reader from.</param>
            <param name="target">The target block to receive the results.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToTargetBlock``1(System.Data.IDbCommand,System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader through the transform function and posts each record to the target block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDataReader to iterate.</param>
            <param name="target">The target block to receive the results.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Results``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Results``1(System.Data.IDataReader,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Results``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Results``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Results``1(System.Data.IDbCommand,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Results``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbDataReader,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="token">A cancellation token.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbCommand,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="token">A cancellation token.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsFromDataTable``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Loads all data into a DataTable before Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ResultsFromDataTable``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Loads all data into a DataTable before Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue of dictionaries before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDataReader)">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDataReader,System.Int32,System.Int32[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDataReader,System.String,System.String[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.Int32,System.Int32[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.String,System.String[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <param name="ordinals">The limited set of ordinals to include.  If none are specified, the returned objects will be empty.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Int32,System.Int32[])">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.Int32,System.Int32[])">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The reader to enumerate.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="token">A cancellation token.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously enumerates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="columnNames">The column names to select.</param>
            <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.String,System.String[])">
            <summary>
            Asynchronously enumerates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.String,System.String[])">
            <summary>
            Asynchronously enumerates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The command to generate a reader from.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The command to generate a reader from.</param>
            <param name="ordinals">The limited set of ordinals to include.  If none are specified, the returned objects will be empty.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.Int32,System.Int32[])">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>>
            <param name="command">The command to generate a reader from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.Int32,System.Int32[])">
            <summary>
            Asynchronously enumerates all the remaining values of the current result set of a data reader.
            DBNull values are left unchanged (retained).
            </summary>>
            <param name="command">The command to generate a reader from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="token">A cancellation token.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains a buffer block of the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Asynchronously enumerates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>>
            <param name="command">The command to generate a reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.String,System.String[])">
            <summary>
            Asynchronously enumerates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The command to generate a reader from.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.String,System.String[])">
            <summary>
            Asynchronously enumerates all records within the current result set using an IDataReader and returns the desired results.
            DBNull values are left unchanged (retained).
            </summary>
            <param name="command">The command to generate a reader from.</param>
            <param name="token">Optional cancellation token.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true and the optional cancellation token has not been cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the conditional action returns true, and the optional cancellation token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Action{System.Data.Common.DbTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the conditional action returns true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true and the optional cancellation token has not been cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the conditional action returns true, and the optional cancellation token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Action{System.Data.Common.DbTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the conditional action returns true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionFactory">
            <summary>
            Simplified interface with IDbConnection as the generic type.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionFactory.Create">
            <summary>
            Generates a new connection of declared generic type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionFactory`1">
            <summary>
            Base interface for creating connections.
            Useful for dependency injection.
            </summary>
            <typeparam name="TConnection">The actual connection type.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionFactory`1.Create">
            <summary>
            Generates a new connection of declared generic type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Open.Database.Extensions.QueryResult`1">
            <summary>
            A container for data reader results that also provides the column names and other helpful data methods.
            </summary>
            <typeparam name="TResult">The type of the result property.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.QueryResult`1.#ctor(System.Int32[],System.String[],`0)">
            <param name="ordinals">The ordinal values requested</param>
            <param name="names">The column names requested.</param>
            <param name="result">The result.</param>
        </member>
        <member name="F:Open.Database.Extensions.QueryResult`1.ColumnCount">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.QueryResult`1.Ordinals">
            <summary>
            The ordinal values requested.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.QueryResult`1.Names">
            <summary>
            The column names requested.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.QueryResult`1.Result">
            <summary>
            The values requested.  A Queue is used since values are typically used first in first out and dequeuing results helps reduced redunant memory usage.
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.QueryResultExtensions">
            <summary>
            A set of extensions for getting column data from a QueryResult.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.DequeueAsMappedDictionaries(Open.Database.Extensions.QueryResult{System.Collections.Generic.Queue{System.Object[]}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column mapped dictionary for each entry.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <returns>An enumerable that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.DequeueAsMappedDictionaries(System.Threading.Tasks.Task{Open.Database.Extensions.QueryResult{System.Collections.Generic.Queue{System.Object[]}}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column mapped dictionary for each entry.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <returns>An enumerable that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Returns an enumerable that dequeues the results and attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An enumerable that dequeues the results and returns an entity of type T.</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns an enumerable that dequeues the results and attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An enumerable that dequeues the results and returns an entity of type T.</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.DequeueAs``1(System.Threading.Tasks.Task{Open.Database.Extensions.QueryResult{System.Collections.Generic.Queue{System.Object[]}}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Returns an enumerable that dequeues the results and attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An enumerable that dequeues the results and returns an entity of type T.</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.DequeueAs``1(System.Threading.Tasks.Task{Open.Database.Extensions.QueryResult{System.Collections.Generic.Queue{System.Object[]}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns an enumerable that dequeues the results and attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An enumerable that dequeues the results and returns an entity of type T.</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.AsMappedDictionaries(Open.Database.Extensions.QueryResult{System.Threading.Tasks.Dataflow.ISourceBlock{System.Object[]}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column mapped dictionary for each entry.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <returns>An block that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.To``1(Open.Database.Extensions.QueryResult{System.Threading.Tasks.Dataflow.ISourceBlock{System.Object[]}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Returns a block that attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An block that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.To``1(Open.Database.Extensions.QueryResult{System.Threading.Tasks.Dataflow.ISourceBlock{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns a block that attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An block that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.To``1(Open.Database.Extensions.QueryResult{System.Threading.Tasks.Dataflow.ISourceBlock{System.Object[]}},System.ValueTuple{System.String,System.String}[])">
            <summary>
            Returns a block that attempts to map the fields to type T.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>An block that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.AsMappedDictionaries(Open.Database.Extensions.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column mapped dictionary for each entry.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <returns>An enumerable that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.QueryResultExtensions.AsMappedDictionaries(System.Threading.Tasks.Task{Open.Database.Extensions.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column mapped dictionary for each entry.
            DBNull values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a .Retrieve method.</param>
            <returns>An enumerable that dequeues the results and returns a column mapped dictionary for each entry</returns>
        </member>
        <member name="T:Open.Database.Extensions.SqlClient.ExpressiveSqlCommand">
            <summary>
            A specialized for SqlClient abstraction for executing commands on a database using best practices and simplified expressive syntax.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.ExpressiveSqlCommand.#ctor(Open.Database.Extensions.IDbConnectionFactory{System.Data.SqlClient.SqlConnection},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.Data.SqlDbType,Open.Database.Extensions.SqlClient.ExpressiveSqlCommand}.Param})">
            <param name="connFactory">The factory to generate connections from.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.ExpressiveSqlCommand.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.Data.SqlDbType,Open.Database.Extensions.SqlClient.ExpressiveSqlCommand}.Param})">
            <param name="connection">The connection to execute the command on.</param>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type>.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.ExpressiveSqlCommand.AddParams(System.Data.SqlClient.SqlCommand)">
            <summary>
            Handles adding the list of parameters to a new command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:Open.Database.Extensions.SqlClient.Extensions">
            <summary>
            SqlClient extensions for building a command and retrieving data using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateCommand(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an SqlCommand from any SqlConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateTextCommand(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating an text SqlCommand from any SqlConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateStoredProcedureCommand(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure SqlCommand from any SqlConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateCommand(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an SqlCommand from any SqlTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateTextCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text SqlCommand from any SqlTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateStoredProcedureCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure SqlCommand from any SqlTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Object,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            Shortcut for adding command parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The DbType of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AddParameterType(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            Shortcut for adding command a typed (non-input) parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The SqlDbType of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AddParameterType(System.Data.IDbCommand,System.String,System.Data.SqlDbType)">
            <summary>
            Shortcut for adding command a typed (non-input) parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The SqlDbType of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AddReturnParameter(System.Data.SqlClient.SqlCommand,System.Data.SqlDbType,System.String)">
            <summary>
            Shortcut for adding command a typed return parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The SqlDbType of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.Command(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveSqlCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.Command(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveSqlCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The transaction to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.StoredProcedure(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Creates an ExpressiveSqlCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.StoredProcedure(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Creates an ExpressiveSqlCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The transaction to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.Command(Open.Database.Extensions.IDbConnectionFactory{System.Data.SqlClient.SqlConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveSqlCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.StoredProcedure(Open.Database.Extensions.IDbConnectionFactory{System.Data.SqlClient.SqlConnection},System.String)">
            <summary>
            Creates an ExpressiveSqlCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.Command(System.Func{System.Data.SqlClient.SqlConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveSqlCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.StoredProcedure(System.Func{System.Data.SqlClient.SqlConnection},System.String)">
            <summary>
            Creates an ExpressiveSqlCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true and the optional cancellation token has not been cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the conditional action returns true, and the optional cancellation token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Action{System.Data.SqlClient.SqlTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the conditional action returns true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Action{System.Data.SqlClient.SqlTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync``1(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync(System.Data.SqlClient.SqlConnection,System.Data.IsolationLevel,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional``1(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true and the optional cancellation token has not been cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the conditional action returns true, and the optional cancellation token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction``1(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Action{System.Data.SqlClient.SqlTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync``1(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync(System.Data.SqlClient.SqlConnection,System.Nullable{System.Threading.CancellationToken},System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="token">A optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional``1(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value retured from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditional(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the conditional action returns true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction``1(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransaction(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync``1(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionConditionalAsync(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync``1(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ExecuteTransactionAsync(System.Data.SqlClient.SqlConnection,System.Func{System.Data.SqlClient.SqlTransaction,System.Threading.Tasks.Task})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="T:Open.Database.Extensions.SqlClient.SqlConnectionFactory">
            <summary>
            Default SqlConnectionFactory for generating SqlConnections.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.SqlConnectionFactory.#ctor(System.Func{System.Data.SqlClient.SqlConnection})">
            <summary>
            Default injectable connection factory constructor.
            </summary>
            <param name="factory">The factory that generates the connections.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.SqlConnectionFactory.#ctor(System.String)">
            <summary>
            Default injectable connection factory constructor that accepts a connection string.
            </summary>
            <param name="connectionString">Required connection string value.</param>
        </member>
    </members>
</doc>
