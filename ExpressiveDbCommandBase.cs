using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

namespace Open.Database.Extensions
{
	/// <summary>
	/// An base class for executing commands on a database using best practices and simplified expressive syntax.
	/// Includes methods for use with DbConnection and DbCommand types.
	/// </summary>
	/// <typeparam name="TConnection">The type of the connection to be used.</typeparam>
	/// <typeparam name="TCommand">The type of the commands generated by the connection.</typeparam>
	/// <typeparam name="TDbType">The DB type enum to use for parameters.</typeparam>
	/// <typeparam name="TThis">The type of this class in order to facilitate proper expressive notation.</typeparam>
	public abstract class ExpressiveDbCommandBase<TConnection, TCommand, TDbType, TThis>
			: ExpressiveCommandBase<TConnection, TCommand, TDbType, TThis>
			where TConnection : DbConnection
			where TCommand : DbCommand
			where TDbType : struct
			where TThis : ExpressiveDbCommandBase<TConnection, TCommand, TDbType, TThis>
	{
		/// <param name="connFactory">The factory to generate connections from.</param>
		/// <param name="type">The command type>.</param>
		/// <param name="command">The SQL command.</param>
		/// <param name="params">The list of params</param>
		protected ExpressiveDbCommandBase(
			IDbConnectionFactory<TConnection> connFactory,
			CommandType type,
			string command,
			List<Param> @params)
			: base(connFactory, type, command, @params)
		{
		}

		/// <param name="connection">The connection to execute the command on.</param>
		/// <param name="type">The command type>.</param>
		/// <param name="command">The SQL command.</param>
		/// <param name="params">The list of params</param>
		protected ExpressiveDbCommandBase(
			TConnection connection,
			CommandType type,
			string command,
			List<Param> @params)
			: base(connection, type, command, @params)
		{
		}


		/// <summary>
		/// Asynchronously executes a reader on a command with a handler function.
		/// </summary>
		/// <param name="handler">The handler function for each IDataRecord.</param>
		/// <param name="token">A optional cancellation token used when opening the connection.</param>
		public async Task ExecuteAsync(Func<TCommand, Task> handler, CancellationToken? token = null)
		{
			TConnection con = Connection ?? ConnectionFactory.Create();
			try
			{
				using (var cmd = (TCommand)con.CreateCommand(
				Type, Command, Timeout))
				{
					var c = cmd as TCommand;
					if (c == null) throw new InvalidCastException($"Actual command type ({cmd.GetType()}) is not compatible with expected command type ({typeof(TCommand)}).");
					AddParams(c);
					await con.OpenAsync(token ?? CancellationToken.None);
					await handler(c);
				}
			}
			finally
			{
				if (Connection == null) con.Dispose();
			}
		}

		/// <summary>
		/// Asynchronously executes a reader on a command with a transform function.
		/// </summary>
		/// <typeparam name="T">The return type of the transform function.</typeparam>
		/// <param name="transform">The transform function for each IDataRecord.</param>
		/// <param name="token">A optional cancellation token used when opening the connection.</param>
		/// <returns>The result of the transform.</returns>
		public async Task<T> ExecuteAsync<T>(Func<TCommand, Task<T>> transform, CancellationToken? token = null)
		{
			var t = token ?? CancellationToken.None;
			t.ThrowIfCancellationRequested(); // Since cancelled awaited tasks throw, we will follow the same pattern here.
			TConnection con = Connection ?? ConnectionFactory.Create();
			try
			{
				using (var cmd = con.CreateCommand(Type, Command, Timeout))
				{
					var c = cmd as TCommand;
					if (c == null) throw new InvalidCastException($"Actual command type ({cmd.GetType()}) is not compatible with expected command type ({typeof(TCommand)}).");
					AddParams(c);
					if (con.State != ConnectionState.Open) await con.EnsureOpenAsync(t);
					return await transform(c);
				}
			}
			finally
			{
				if (Connection == null) con.Dispose();
			}
		}

		/// <summary>
		/// Calls ExecuteNonQueryAsync on the underlying command but sets up a return parameter and returns that value.
		/// </summary>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The value from the return parameter.</returns>
		public async Task<object> ExecuteReturnAsync(CancellationToken? token = null)
		{
			var t = token ?? CancellationToken.None;
			t.ThrowIfCancellationRequested(); // Since cancelled awaited tasks throw, we will follow the same pattern here.
			TConnection con = Connection ?? ConnectionFactory.Create();
			try
			{
				using (var cmd = con.CreateCommand(Type, Command, Timeout))
				{
					var c = cmd as TCommand;
					if (c == null) throw new InvalidCastException($"Actual command type ({cmd.GetType()}) is not compatible with expected command type ({typeof(TCommand)}).");
					AddParams(c);
					var returnParameter = c.CreateParameter();
					returnParameter.Direction = ParameterDirection.ReturnValue;
					cmd.Parameters.Add(returnParameter);
					if (con.State != ConnectionState.Open) await con.EnsureOpenAsync(t);
					await c.ExecuteNonQueryAsync(t);
					return returnParameter.Value;
				}
			}
			finally
			{
				if (Connection == null) con.Dispose();
			}
		}

		/// <summary>
		/// Calls ExecuteNonQueryAsync on the underlying command but sets up a return parameter and returns that value.
		/// </summary>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The value from the return parameter.</returns>
		public async Task<T> ExecuteReturnAsync<T>(CancellationToken? token = null)
			=> (T)(await ExecuteReturnAsync(token));

		/// <summary>
		/// Asynchronously executes a reader on a command with a handler function.
		/// </summary>
		/// <param name="handler">The handler function for the data reader.</param>
		/// <param name="behavior">The command behavior for once the command the reader is complete.</param>
		/// <param name="token">A optional cancellation token.</param>
		public Task ExecuteReaderAsync(Func<DbDataReader, Task> handler, CommandBehavior behavior = CommandBehavior.Default, CancellationToken? token = null)
			=> ExecuteAsync(async command => await handler(await command.ExecuteReaderAsync(behavior, token ?? CancellationToken.None)), token);

		/// <summary>
		/// Asynchronously executes a reader on a command with a transform function.
		/// </summary>
		/// <typeparam name="T">The return type of the transform function.</typeparam>
		/// <param name="transform">The transform function for each IDataRecord.</param>
		/// <param name="behavior">The command behavior for once the command the reader is complete.</param>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The result of the transform.</returns>
		public Task<T> ExecuteReaderAsync<T>(Func<DbDataReader, Task<T>> transform, CommandBehavior behavior = CommandBehavior.Default, CancellationToken? token = null)
			=> ExecuteAsync(async command => await transform(await command.ExecuteReaderAsync(behavior, token ?? CancellationToken.None)), token);

		/// <summary>
		/// Calls ExecuteNonQueryAsync on the underlying command.
		/// </summary>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The integer responise from the method.</returns>
		public Task<int> ExecuteNonQueryAsync(CancellationToken? token = null)
			=> ExecuteAsync(command => command.ExecuteNonQueryAsync(token ?? CancellationToken.None));

		/// <summary>
		/// Calls ExecuteScalarAsync on the underlying command.
		/// </summary>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The value returned from the method.</returns>
		public Task<object> ExecuteScalarAsync(CancellationToken? token = null)
			=> ExecuteAsync(command => command.ExecuteScalarAsync(token ?? CancellationToken.None));

		/// <summary>
		/// Asynchronously executes scalar on the underlying command.
		/// </summary>
		/// <typeparam name="T">The type expected.</typeparam>
		/// <param name="transform">The transform function for the result.</param>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The value returned from the method.</returns>
		public async Task<T> ExecuteScalarAsync<T>(Func<object, T> transform, CancellationToken? token = null)
			=> transform(await ExecuteScalarAsync(token ?? CancellationToken.None));

		/// <summary>
		/// Asynchronously executes scalar on the underlying command and casts to the expected type.
		/// </summary>
		/// <typeparam name="T">The type expected.</typeparam>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The value returned from the method.</returns>
		public async Task<T> ExecuteScalarAsync<T>(CancellationToken? token = null)
			=> (T)(await ExecuteScalarAsync(token ?? CancellationToken.None));

		/// <summary>
		/// Asynchronously executes scalar on the underlying command.
		/// </summary>
		/// <typeparam name="T">The type expected.</typeparam>
		/// <param name="transform">The transform function (task) for the result.</param>
		/// <param name="token">A optional cancellation token.</param>
		/// <returns>The value returned from the method.</returns>
		public async Task<T> ExecuteScalarAsync<T>(Func<object, Task<T>> transform, CancellationToken? token = null)
			=> await transform(await ExecuteScalarAsync(token ?? CancellationToken.None));

		/// <summary>
		/// Iterates asynchronously and will stop iterating if canceled.
		/// </summary>
		/// <param name="handler">The active IDataRecord is passed to this handler.</param>
		/// <param name="token">An optional cancellation token.</param>
		/// <returns></returns>
		public Task IterateReaderAsync(Action<IDataRecord> handler, CancellationToken? token = null)
			=> ExecuteAsync(command => command.ForEachAsync(handler, token), token);

		/// <summary>
		/// Iterates asynchronously until the handler returns false.  Then cancels.
		/// </summary>
		/// <param name="predicate">If true, the iteration continues.</param>
		/// <returns>The task that completes when the iteration is done or the predicate evaluates false.</returns>
		public Task IterateReaderAsyncWhile(Func<IDataRecord, bool> predicate, CancellationToken? token = null)
			=> ExecuteAsync(command => command.IterateReaderAsyncWhile(predicate), token);

		/// <summary>
		/// Iterates asynchronously until the handler returns false.  Then cancels.
		/// </summary>
		/// <param name="predicate">If true, the iteration continues.</param>
		/// <returns>The task that completes when the iteration is done or the predicate evaluates false.</returns>
		public Task IterateReaderAsyncWhile(Func<IDataRecord, Task<bool>> predicate)
			=> ExecuteAsync(command => command.IterateReaderAsyncWhile(predicate));



		/// <summary>
		/// Asynchronously iterates a IDataReader and returns the each result until the count is met.
		/// </summary>
		/// <typeparam name="T">The return type of the transform function.</typeparam>
		/// <param name="transform">The transform function to process each IDataRecord.</param>
		/// <param name="count">The maximum number of records before complete.</param>
		/// <returns>The value from the transform.</returns>
		public Task<List<T>> TakeAsync<T>(Func<IDataRecord, T> transform, int count)
		{
			if (count < 0) throw new ArgumentOutOfRangeException(nameof(count), count, "Cannot be negative.");
			List<T> results = new List<T>();
			if (count == 0) return Task.FromResult(results);

			return IterateReaderAsyncWhile(record =>
			{
				results.Add(transform(record));
				return results.Count < count;
			})
			.ContinueWith(t => results);
		}


		/// <summary>
		/// Reads the first column from every record and returns the results as a list..
		/// DBNull values are converted to null.
		/// </summary>
		/// <returns>The list of transformed records.</returns>
		public Task<IEnumerable<object>> FirstOrdinalResultsAsync()
			=> ExecuteAsync(command => command.FirstOrdinalResultsAsync());

		/// <summary>
		/// Reads the first column from every record..
		/// DBNull values are converted to null.
		/// </summary>
		/// <returns>The enumerable of casted values.</returns>
		public Task<IEnumerable<T0>> FirstOrdinalResultsAsync<T0>()
			=> ExecuteAsync(command => command.FirstOrdinalResultsAsync<T0>());

		/// <summary>
		/// Asynchronously iterates all records within the current result set using an IDataReader and returns the desired results.
		/// </summary>
		/// <param name="n">The first ordinal to include in the request to the reader for each record.</param>
		/// <param name="others">The remaining ordinals to request from the reader for each record.</param>
		/// <returns>The QueryResult that contains all the results and the column mappings.</returns>
		public Task<QueryResult<Queue<object[]>>> RetrieveAsync(int n, params int[] others)
			=> RetrieveAsync(new int[1] { n }.Concat(others));

		/// <summary>
		/// Iterates all records within the current result set using an IDataReader and returns the desired results.
		/// </summary>
		/// <param name="c">The first column name to include in the request to the reader for each record.</param>
		/// <param name="others">The remaining column names to request from the reader for each record.</param>
		/// <returns>The QueryResult that contains all the results and the column mappings.</returns>
		public Task<QueryResult<Queue<object[]>>> RetrieveAsync(string c, params string[] others)
			=> RetrieveAsync(new string[1] { c }.Concat(others));

		/// <summary>
		/// Posts all transformed records to the provided target block.
		/// If .Complete is called on the target block, then the iteration stops.
		/// </summary>
		/// <typeparam name="T">The return type of the transform function.</typeparam>
		/// <param name="transform">The transform function to process each IDataRecord.</param>
		/// <param name="target">The target block to receive the records.</param>
		/// <returns>A task that is complete once there are no more results.</returns>
		public Task ToTargetBlockAsync<T>(ITargetBlock<T> target, Func<IDataRecord, T> transform)
		{
			Task<bool> lastSend = null;
			return IterateReaderAsyncWhile(async r =>
			{
				if (lastSend != null && !await lastSend) return false;
				lastSend = target.SendAsync(transform(r));
				return true;
			});
		}

		/// <summary>
		/// Provides a BufferBlock as the source of records.
		/// </summary>
		/// <typeparam name="T">The return type of the transform function.</typeparam>
		/// <param name="transform">The transform function to process each IDataRecord.</param>
		/// <returns>A buffer block that is recieving the results.</returns>
		public ISourceBlock<T> AsSourceBlockAsync<T>(Func<IDataRecord, T> transform)
		{
			var source = new BufferBlock<T>();
			ToTargetBlockAsync(source, transform)
				.ContinueWith(t => source.Complete())
				.ConfigureAwait(false);
			return source;
		}

		/// <summary>
		/// Returns a source block as the source of records.
		/// </summary>
		/// <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
		/// <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
		/// <returns>A transform block that is recieving the results.</returns>
		public ISourceBlock<T> AsSourceBlockAsync<T>(IEnumerable<KeyValuePair<string, string>> fieldMappingOverrides)
		   where T : new()
			=> AsSourceBlockAsync<T>(fieldMappingOverrides?.Select(kvp => (kvp.Key, kvp.Value)));

		/// <summary>
		/// Returns a source block as the source of records.
		/// </summary>
		/// <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
		/// <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
		/// <returns>A transform block that is recieving the results.</returns>
		public ISourceBlock<T> AsSourceBlockAsync<T>(params (string Field, string Column)[] fieldMappingOverrides)
		where T : new()
			=> AsSourceBlockAsync<T>(fieldMappingOverrides as IEnumerable<(string Field, string Column)>);


		/// <summary>
		/// Asynchronously returns all records via a transform function.
		/// </summary>
		/// <param name="transform">The desired column names.</param>
		/// <returns>A task containing the list of results.</returns>
		public async Task<List<T>> ToListAsync<T>(Func<IDataRecord, T> transform)
		{
			var results = new List<T>();
			await IterateReaderAsync(record => results.Add(transform(record)));
			return results;
		}

		/// <summary>
		/// Asynchronously returns all records and iteratively attempts to map the fields to type T.
		/// </summary>
		/// <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
		/// <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
		/// <returns>A task containing the list of results.</returns>
		public Task<IEnumerable<T>> ResultsAsync<T>(IEnumerable<KeyValuePair<string, string>> fieldMappingOverrides) where T : new()
			=> ResultsAsync<T>(fieldMappingOverrides?.Select(kvp => (kvp.Key, kvp.Value)));

		/// <summary>
		/// Asynchronously returns all records and iteratively attempts to map the fields to type T.
		/// </summary>
		/// <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
		/// <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
		/// <returns>A task containing the list of results.</returns>
		public Task<IEnumerable<T>> ResultsAsync<T>(params (string Field, string Column)[] fieldMappingOverrides) where T : new()
			=> ResultsAsync<T>(fieldMappingOverrides as IEnumerable<(string Field, string Column)>);

		/// <summary>
		/// Returns a source block as the source of records.
		/// </summary>
		/// <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
		/// <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
		/// <returns>A transform block that is recieving the results.</returns>
		public ISourceBlock<T> AsSourceBlockAsync<T>(IEnumerable<(string Field, string Column)> fieldMappingOverrides)
			where T : new()
		{
			var x = new Transformer<T>(fieldMappingOverrides);
			var cn = x.ColumnNames;
			var block = x.ResultsBlock(out Action<string[]> initColumnNames);

			ExecuteReaderAsync(async reader =>
			{
				// Ignores fields that don't match.
				var columns = reader.GetMatchingOrdinals(cn, true);

				var ordinalValues = columns.Select(c => c.Ordinal).ToArray();
				initColumnNames(columns.Select(c => c.Name).ToArray());

				Task<bool> lastSend = null;
				while (await reader.ReadAsync())
				{
					if (lastSend != null && !await lastSend) break;
					lastSend = block.SendAsync(reader.GetValuesFromOrdinals(ordinalValues));
				}

				block.Complete();
			});

			return block;
		}

		/// <summary>
		/// Asynchronously iterates all records within the first result set using an IDataReader and returns the results.
		/// </summary>
		/// <returns>The QueryResult that contains all the results and the column mappings.</returns>
		public Task<QueryResult<Queue<object[]>>> RetrieveAsync()
			=> ExecuteReaderAsync(reader => reader.RetrieveAsync());

		/// <summary>
		/// Asynchronously iterates all records within the current result set using an IDataReader and returns the desired results.
		/// </summary>
		/// <param name="ordinals">The ordinals to request from the reader for each record.</param>
		/// <returns>The QueryResult that contains all the results and the column mappings.</returns>
		public Task<QueryResult<Queue<object[]>>> RetrieveAsync(IEnumerable<int> ordinals)
			=> ExecuteReaderAsync(reader => reader.RetrieveAsync(ordinals));

		/// <summary>
		/// Iterates all records within the first result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
		/// </summary>
		/// <param name="columnNames">The column names to select.</param>
		/// <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
		/// <returns>The QueryResult that contains all the results and the column mappings.</returns>
		public Task<QueryResult<Queue<object[]>>> RetrieveAsync(IEnumerable<string> columnNames, bool normalizeColumnOrder = false)
			=> ExecuteReaderAsync(reader => reader.RetrieveAsync(columnNames, normalizeColumnOrder));


		/// <summary>
		/// Asynchronously returns all records and iteratively attempts to map the fields to type T.
		/// </summary>
		/// <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
		/// <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
		/// <returns>A task containing the list of results.</returns>
		public Task<IEnumerable<T>> ResultsAsync<T>(IEnumerable<(string Field, string Column)> fieldMappingOverrides)
			where T : new()
			=> ExecuteReaderAsync(reader => reader.ResultsAsync<T>(fieldMappingOverrides));
	}
}
