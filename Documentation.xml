<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Open.Database.Extensions</name>
    </assembly>
    <members>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.TakeAsync``1(System.Func{System.Data.IDataRecord,``0},System.Int32)">
            <summary>
            Asynchronously iterates a IDataReader and returns the each result until the count is met.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="maxCount">The maximum number of records before complete.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.IterateReaderAsync(System.Action{System.Data.IDataRecord},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Iterates asynchronously and will stop iterating if canceled.
            </summary>
            <param name="handler">The active IDataRecord is passed to this handler.</param>
            <param name="token">An optional cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.IterateReaderAsyncWhile(System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            Iterates asynchronously until the handler returns false.  Then cancels.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.ToTargetBlockAsync``1(System.Func{System.Data.IDataRecord,``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Posts all transformed records to the provided target block.
            If .Complete is called on the target block, then the iteration stops.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="target">The target block to recieve the records.</param>
            <returns>A task that is complete once there are no more results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.AsSourceBlockAsync``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Provides a BufferBlock as the source of records.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A buffer block that is recieving the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.ToListAsync``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Asynchronously returns all records via a transform function.
            </summary>
            <param name="transform">The desired column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.RetrieveAsync(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Asynchronously returns all records in order as Dictionaries where the keys are the specified column names.
            </summary>
            <param name="columnNames">The desired column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.RetrieveAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Asynchronously returns all records in order as Dictionaries where the keys are the specified column names.
            </summary>
            <param name="columnNames">The desired column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.RetrieveAsync(System.String[])">
            <summary>
            Asynchronously returns all records in order as Dictionaries where the keys are the specified column names.
            </summary>
            <param name="columnNames">The desired column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveAsyncCommandBase`4.ResultsAsync``1">
            <summary>
            Retrieves the results before closing the connection and asynchronously returning an enumerable that coerces the data to fit type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <returns>A task containing the enumerable to pull the transformed results from.</returns>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommandBase`4">
            <summary>
            Base class for developing expressive commands.
            </summary>
            <typeparam name="TConnection">The type of the connection to be used.</typeparam>
            <typeparam name="TCommand">The type of the commands generated by the connection.</typeparam>
            <typeparam name="TDbType">The DB type enum to use for parameters.</typeparam>
            <typeparam name="TThis">The type of this class in order to facilitate proper expressive notation.</typeparam>
        </member>
        <member name="F:Open.Database.Extensions.ExpressiveCommandBase`4.ConnectionFactory">
            <summary>
            THe connection factory to use to generate connections and commands.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Command">
            <summary>
            The command text or procedure name to use.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Type">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Params">
            <summary>
            The list of params to apply to the command before execution.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Timeout">
            <summary>
            The command timeout value.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam(System.String,System.Object,`2)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam(System.String,System.Object)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam``1(System.String,System.Nullable{``0},`2)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam``1(System.String,System.Nullable{``0})">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParam(System.String)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.SetTimeout(System.UInt16)">
            <summary>
            Sets the timeout value.
            </summary>
            <param name="seconds">The number of seconds to wait before the connection times out.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AddParams(`1)">
            <summary>
            Handles adding the list of parameters to a new command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Execute(System.Action{`1})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Execute``1(System.Func{`1,``0})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReaderInternal``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Internal reader for simplifying iteration.  If exposed publicly could potentially hold connections open because an iteration may have not completed.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The results of each transformation.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteReader(System.Action{System.Data.IDataReader})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteReader``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReader(System.Action{System.Data.IDataRecord})">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReaderWhile(System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            Iterates a reader on a command while the handler function returns true.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.First``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates a IDataReader and returns the first result through a transform funciton.  Throws if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Single``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates a IDataReader and returns the first result through a transform funciton.  Throws if none or more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteNonQuery">
            <summary>
            Calls ExecuteNonQuery on the underlying command.
            </summary>
            <returns>The integer responise from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteScalar">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <returns>The varlue returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ExecuteScalar``1">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The varlue returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.LoadTable">
            <summary>
            Imports all data using an IDataReader into a DataTable.
            </summary>
            <returns>The resultant DataTabel.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReaderInternal">
            <summary>
            Internal reader for simplifying iteration.  If exposed publicly could potentially hold connections open because an iteration may have not completed.
            </summary>
            <returns>The enumerable with the data records stored in a dictionary..</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.IterateReaderInternal(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Internal reader for simplifying iteration.  If exposed publicly could potentially hold connections open because an iteration may have not completed.
            </summary>
            <returns>The enumerable with the data records stored in a dictionary.  Only the column names requested will be returned.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ToList``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Converts all IDataRecords into a list using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="transform">The transform function.</param>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ToArray``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Converts all IDataRecords into an array using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="transform">The transform function.</param>
            <returns>The array of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Returns all records in order as Dictionaries where the keys are the specified column names.
            </summary>
            <param name="columnNames">The desired column names.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns all records in order as Dictionaries where the keys are the specified column names.
            </summary>
            <param name="columnNames">The desired column names.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Retrieve(System.String[])">
            <summary>
            Returns all records in order as Dictionaries where the keys are the specified column names.
            </summary>
            <param name="columnNames">The desired column names.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.ToTargetBlock``1(System.Func{System.Data.IDataRecord,``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Posts all records to a target block using the transform function.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="transform">The transform function.</param>
            <param name="target">The target block to receive the results (to be posted to).</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.AsSourceBlock``1(System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Returns a buffer block that will contain the results.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="transform">The transform function.</param>
            <returns>The buffer block that will contain the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Results``1">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored in an array of dictionaries before applying the tranform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommandBase`4.Param">
            <summary>
            A struct that represents the param to be created when the command is exectued.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Name">
            <summary>
            The name of the param.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Value">
            <summary>
            The value of the param.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Type">
            <summary>
            The DbType of the param.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Param.Equals(System.Object)">
            <summary>
            Determines whether the specified param is equal to the current one.
            </summary>
            <param name="obj">Param to compare against.</param>
            <returns>True if properties are equal.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Param.op_Equality(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param,Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`4.Param.op_Inequality(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param,Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3}.Param)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.Extensions">
            <summary>
            Core non-DB-specific extensions for building a command and retrieving data using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Shortcut for adding command parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.AddParameterType(System.Data.IDbCommand,System.String,System.Data.DbType)">
            <summary>
            Shortcut for adding command a typed (non-input) parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The DbType of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an IDbCommand from any IDbConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created IDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Iterate(System.Data.IDataReader,System.Action{System.Data.IDataRecord})">
            <summary>
            Iterates all records from an IDataReader.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Iterate``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records from an IDataReader.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToList``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToArray``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDataTable(System.Data.IDbCommand)">
            <summary>
            Loads all data from a command through an IDataReader into a DataTable.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <returns>The resultant DataTable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            Iterates an IDataReader while the predicate returns true.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="predicate">The hanlder function that processes each IDataRecord and decides if iteration should continue.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReader(System.Data.IDbCommand,System.Action{System.Data.IDataReader},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ExecuteReader``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReader(System.Data.IDbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.IterateReaderWhile(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Iterates an IDataReader on a command while the predicate returns true.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="predicate">The hanlder function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.First``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates a IDataReader and returns the first result through a transform funciton.  Throws if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Single``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates a IDataReader and returns the first result through a transform funciton.  Throws if none or more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.String[])">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnNames">The column names to query.  If none specified, the result will contain all columns.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the specified column data of IDataRecord as a Dictionary.
            </summary>
            <param name="record">The IDataRecord to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>A list of dictionaries represending the requested data.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>A list of dictionaries represending the requested data.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Retrieve(System.Data.IDbCommand,System.String[])">
            <summary>
            Iterates all records using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select.  If none specified, the results will contain all columns.</param>
            <returns>A list of dictionaries represending the requested data.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.ToTargetBlock``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Iterates an IDataReader and through the transform function and posts each record it to the target block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="target">The target block to recieve the results.</param>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.Command(Open.Database.Extensions.IDbConnectionFactory{System.Data.IDbConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveDbCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Extensions.StoredProcedure(Open.Database.Extensions.IDbConnectionFactory{System.Data.IDbConnection},System.String)">
            <summary>
            Creates an ExpressiveDbCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionFactory`1">
            <summary>
            Base interface for creating connections.
            Useful for dependency injection.
            </summary>
            <typeparam name="TConnection">The actual connection type.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionFactory`1.Create">
            <summary>
            Generates a new connection of declared generic type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionFactory">
            <summary>
            Simplified interface with IDbConnection as the generic type.
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.SqlClient.Extensions">
            <summary>
            SqlClient extensions for building a command and retrieving data using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AddParameterType(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType)">
            <summary>
            Shortcut for adding command a typed (non-input) parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The SqlDbType of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AddParameterType(System.Data.IDbCommand,System.String,System.Data.SqlDbType)">
            <summary>
            Shortcut for adding command a typed (non-input) parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="type">The SqlDbType of the parameter.</param>
            <returns>The created IDbDataParameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.CreateCommand(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an SqlCommand from any SqlConnection.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ToListAsync``1(System.Data.SqlClient.SqlDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The SqlDataReader to read from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ToListAsync``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The SqlCommand to generate a reader from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ToTargetBlock``1(System.Data.SqlClient.SqlDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Asynchronously iterates an IDataReader and through the transform function and posts each record it to the target block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The SqlDataReader to read from.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="target">The target block to recieve the results.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.ToTargetBlock``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Asynchronously iterates an IDataReader and through the transform function and posts each record it to the target block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="target">The target block to recieve the results.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.RetrieveAsync(System.Data.SqlClient.SqlCommand,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>A task containing a list of dictionaries represending the requested data.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.RetrieveAsync(System.Data.SqlClient.SqlCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>A task containing a list of dictionaries represending the requested data.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.RetrieveAsync(System.Data.SqlClient.SqlCommand,System.String[])">
            <summary>
            Asynchronously iterates all records using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="command">The IDbCommand to generate the reader from.</param>
            <param name="columnNames">The column names to select. If none specified, the results will contain all columns.</param>
            <returns>A task containing a list of dictionaries represending the requested data.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.IterateReaderAsync(System.Data.SqlClient.SqlCommand,System.Action{System.Data.IDataRecord},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously iterates all records from an IDataReader.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="token">Optional cancellatio token.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.IterateReaderAsyncWhile(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Asynchronously iterates an IDataReader on a command while the predicate returns true.
            </summary>
            <param name="command">The IDbCommand to generate a reader from.</param>
            <param name="predicate">The hanlder function that processes each IDataRecord and decides if iteration should continue.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AsSourceBlock``1(System.Data.SqlClient.SqlDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Asynchronously iterates an IDataReader and through the transform function and posts each record it to a buffer block.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>A buffer block which receives the posted results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.AsSourceBlock``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Asynchronously iterates an IDataReader and through the transform function and posts each record it to a buffer block.
            The command is constructed and executed asynchronously and deferred.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The SqlCommand to generate a reader from.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>A buffer block which receives the posted results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.Command(Open.Database.Extensions.IDbConnectionFactory{System.Data.SqlClient.SqlConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an ExpressiveSqlCommand for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.Extensions.StoredProcedure(Open.Database.Extensions.IDbConnectionFactory{System.Data.SqlClient.SqlConnection},System.String)">
            <summary>
            Creates an ExpressiveSqlCommand with command type set to StoredProcedure for subsequent configuration and execution.
            </summary>
            <param name="target">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <returns>The resultant ExpressiveSqlCommand.</returns>
        </member>
        <member name="T:Open.Database.Extensions.SqlClient.SqlConnectionFactory">
            <summary>
            Default SqlConnectionFactory for generating SqlConnections.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.SqlConnectionFactory.#ctor(System.String)">
            <summary>
            Default injectable connection factory constructor.
            </summary>
            <param name="connectionString">Required connection string value.</param>
        </member>
        <member name="M:Open.Database.Extensions.SqlClient.SqlConnectionFactory.Create">
            <summary>
            Method for generating SqlConnections.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
