<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Open.Database.Extensions.Core</name>
    </assembly>
    <members>
        <member name="T:Open.Database.Extensions.Core.DbConnectionProvider`1">
            <summary>
            Simplifies handling connections.
            </summary>
            <typeparam name="TConnection"></typeparam>
        </member>
        <member name="M:Open.Database.Extensions.Core.DbConnectionProvider`1.Take">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.Core.DbConnectionProvider`1.Give(System.Data.IDbConnection)">
            <inheritdoc />
        </member>
        <member name="T:Open.Database.Extensions.Core.QueryResult`1">
            <summary>
            A container for data reader results that also provides the column names
            and other helpful data methods.
            </summary>
            <typeparam name="TResult">The type of the result property.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResult`1.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},`0)">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.Core.QueryResult`1"/>.</summary>
            <param name="ordinals">The ordinal values requested</param>
            <param name="names">The column names requested.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResult`1.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String},`0)">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResult`1.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},`0)" />
        </member>
        <member name="F:Open.Database.Extensions.Core.QueryResult`1.ColumnCount">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.Core.QueryResult`1.Ordinals">
            <summary>
            The ordinal values requested.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.Core.QueryResult`1.Names">
            <summary>
            The column names requested.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.Core.QueryResult`1.Result">
            <summary>
            The values requested.  A Queue is used since values are typically used
            first in first out and dequeuing results helps reduced redundant memory
            usage.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResult`1.op_Implicit(Open.Database.Extensions.Core.QueryResult{`0})~`0">
            <summary>Implicity returns the result from this instance.</summary>
            <param name="result">The source of the result.</param>
        </member>
        <member name="T:Open.Database.Extensions.Core.QueryResultCollection`2">
            <summary>
            A container for data reader results that also provides the column names and
            other helpful data methods.
            </summary>
            <typeparam name="T">The type of the items in the resultant
            enumerble.</typeparam>
            <typeparam name="TResult">The type of the result property.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultCollection`2.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},`1)">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.Core.QueryResultCollection`2"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String},`1)">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultCollection`2.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},`1)" />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultCollection`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Open.Database.Extensions.Core.QueryResultCollection`1">
            <summary>
            A container for data reader results that also provides the column names and
            other helpful data methods.
            </summary>
            <typeparam name="T">The type of the items in the resultant enumerble.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultCollection`1.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.Core.QueryResultCollection`1"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultCollection`1.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultCollection`2.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},`1)" />
        </member>
        <member name="T:Open.Database.Extensions.Core.QueryResultQueue`1">
            <summary>
            A container for data reader results that also provides the column names and
            other helpful data methods.
            </summary>
            <typeparam name="T">The type of the items in the resultant
            enumerble.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultQueue`1.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Generic.Queue{`0})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.Core.QueryResult`1"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultQueue`1.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Queue{`0})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultQueue`1.#ctor(System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Generic.Queue{`0})" />
        </member>
        <member name="T:Open.Database.Extensions.Core.QueryResultExtensions">
            <summary>
            A set of extensions for getting column data from a QueryResult.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAsMappedDictionaries(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column
            mapped dictionary for each entry.<see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a
            .Retrieve method.</param>
            <returns>An enumerable that dequeues the results and returns a column
            mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAsMappedDictionaries(System.Threading.Tasks.Task{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}}})">
            <inheritdoc
            cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAsMappedDictionaries(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}})"/>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAsMappedDictionaries(System.Threading.Tasks.ValueTask{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}}})">
            <inheritdoc
            cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAsMappedDictionaries(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}})"/>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns an enumerable that dequeues the results and attempts to map the
            fields to type T.
            </summary>
            <remarks>DBNull values are converted to null.</remarks>
            <param name="source">The query result.  Typically produced by a
            .Retrieve method.</param>
            <param name="fieldMappingOverrides">An optional override map of field
            names to column names where the keys are the property names, and values
            are the column names.</param>
            <returns>An enumerable that dequeues the results and returns an entity
            of type T.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(System.Threading.Tasks.Task{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(System.Threading.Tasks.ValueTask{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(System.Threading.Tasks.Task{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(System.Threading.Tasks.ValueTask{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.QueryResultExtensions.DequeueAs``1(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.AsMappedDictionaries(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}})">
            <summary>
            Returns an enumerable that dequeues the results and returns a column
            mapped dictionary for each entry.<see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <param name="source">The query result.  Typically produced by a
            .Retrieve method.</param>
            <returns>An enumerable that dequeues the results and returns a column
            mapped dictionary for each entry</returns>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.AsMappedDictionaries(System.Threading.Tasks.ValueTask{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}}})">
            <inheritdoc
            cref="M:Open.Database.Extensions.Core.QueryResultExtensions.AsMappedDictionaries(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}})"/>
        </member>
        <member name="M:Open.Database.Extensions.Core.QueryResultExtensions.AsMappedDictionaries(System.Threading.Tasks.Task{Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}}})">
            <inheritdoc
            cref="M:Open.Database.Extensions.Core.QueryResultExtensions.AsMappedDictionaries(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.IEnumerable{System.Object[]}})"/>
        </member>
        <member name="T:Open.Database.Extensions.Core.Transformer`1">
            <summary>
            Utility of transforming retrieved data into models matching the type parameter provided.
            </summary>
            <typeparam name="T">The type of the model to create from the data.</typeparam>
        </member>
        <member name="F:Open.Database.Extensions.Core.Transformer`1.MaxArrayBuffer">
            <summary>
            Maximum number of arrays to hold in the local array pool per bucket.
            May also define how many records are pre buffered before transforming.
            </summary>
        </member>
        <member name="F:Open.Database.Extensions.Core.Transformer`1.LocalPool">
            <summary>
            Buffers for transforming.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.Core.Transformer`1.Type">
            <summary>
            The type of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.Core.Transformer`1.PropertyNames">
            <summary>
            The property names.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.Core.Transformer`1.ColumnNames">
            <summary>
            The column names.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Constructs a transformer using the optional field overrides.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.Create(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Static utility for creating a Transformer <typeparamref name="T"/>.
            </summary>
            <param name="overrides"></param>
        </member>
        <member name="T:Open.Database.Extensions.Core.Transformer`1.Processor">
            <summary>
            A sub class for processing the transformer results.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.Processor.#ctor(Open.Database.Extensions.Core.Transformer{`0})">
            <summary>
            Constructs a processor.
            </summary>
            <param name="transformer">The transformer to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.Processor.#ctor(Open.Database.Extensions.Core.Transformer{`0},System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Constructs a processor.
            </summary>
            <param name="transformer">The transformer to use.</param>
            <param name="names">The names of columns/properties to acquire.</param>
        </member>
        <member name="P:Open.Database.Extensions.Core.Transformer`1.Processor.Transformer">
            <summary>
            The transformer being used.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.Core.Transformer`1.Processor.Transform">
            <summary>
            The resultant transform function.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.Processor.SetNames(System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Allows for deferred initialization.
            </summary>
            <param name="names">The column/property names to process.</param>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.AsDequeueingEnumerable(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}})">
            <inheritdoc cref="M:Open.Database.Extensions.Core.Transformer`1.AsDequeueingEnumerable(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Buffers.ArrayPool{System.Object},System.Boolean)" />
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.AsDequeueingEnumerable(Open.Database.Extensions.Core.QueryResult{System.Collections.Generic.Queue{System.Object[]}},System.Buffers.ArrayPool{System.Object},System.Boolean)">
            <summary>
            Dequeues the results and transforms each one by one during enumeration.
            </summary>
            <param name="results">The results to process.</param>
            <param name="arrayPool">The array pool to return the buffers to.</param>
            <param name="clearArrays">Indicates whether the contents of the buffers should be cleared before reuse.</param>
            <returns>A dequeuing enumerable of the transformed results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.Results(System.Data.IDataReader)">
            <inheritdoc cref="M:Open.Database.Extensions.Core.Transformer`1.ResultsBuffered(System.Data.IDataReader,System.Boolean)"/>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.ResultsBuffered(System.Data.IDataReader,System.Boolean)">
            <summary>
            Transforms the results
            </summary>
            <param name="reader">The reader to read from.</param>
            <param name="readStarted"></param>
            <returns>An enumerable that transforms the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.Core.Transformer`1.Results(System.Data.DataTable,System.Boolean)">
            <summary>
            Processes the data from the data table into a queue. Then dequeues the results and transforms each one by one during enumeration.
            </summary>
            <param name="table">The data to process.</param>
            <param name="clearTable">If true, will clear the table after buffering the data.</param>
            <returns>A dequeuing enumerable of the transformed results.</returns>
        </member>
        <member name="T:Open.Database.Extensions.DbConnectionFactory">
            <summary>
            DbConnection factory implementation that accepts a factory function.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory.#ctor(System.Func{System.Data.IDbConnection})">
            <summary>
            Constructs a DbConnectionFactory.
            </summary>
            <param name="factory">The factory function.</param>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory.Create">
            <summary>
            Creates a connection of from the underlying factory function.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory.Create``1(System.Func{``0})">
            <summary>
            Creates a Non-Generic DbConnectionFactory.
            </summary>
            <param name="factory">The factory function.</param>
            <returns>A Non-Generic DbConnectionFactory</returns>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory.op_Implicit(System.Func{System.Data.IDbConnection})~Open.Database.Extensions.DbConnectionFactory">
            <summary>
            Implicitly converts a connection factory function to a connection factory instance.
            </summary>
            <param name="factory">The factory function.</param>
        </member>
        <member name="T:Open.Database.Extensions.DbConnectionFactory`1">
            <summary>
            Generic connection factory implementation that accepts a factory function.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory`1.#ctor(System.Func{`0})">
            <summary>
            Constructs a DbConnectionFactory.
            </summary>
            <param name="factory">The factory function.</param>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory`1.Create">
            <summary>
            Creates a connection of from the underlying factory function.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactory`1.op_Implicit(System.Func{`0})~Open.Database.Extensions.DbConnectionFactory{`0}">
            <summary>
            Implicitly converts a connection factory function to a genetic-typed connection factory instance.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommand">
            <summary>
            An abstraction for executing commands on a database using best practices and simplified expressive syntax.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommand.#ctor(Open.Database.Extensions.IDbConnectionPool,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommand"/>.</summary>
            <inheritdoc cref="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(Open.Database.Extensions.IDbConnectionPool{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})" />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommand.#ctor(Open.Database.Extensions.IDbConnectionFactory,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommand"/>.</summary>
            <inheritdoc cref="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(Open.Database.Extensions.IDbConnectionFactory{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})" />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommand.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommand"/>.</summary>
            <inheritdoc cref="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(`0,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})" />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommand.#ctor(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommand"/>.</summary>
            <inheritdoc cref="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})" />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommand.#ctor(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommand"/>.</summary>
            <inheritdoc cref="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(`0,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})" />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommand.AddParams(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommandBase`5">
            <summary>
            Base class for developing expressive commands.
            Includes methods for use with IDbConnection and IDbCommand types.
            </summary>
            <typeparam name="TConnection">The type of the connection to be used.</typeparam>
            <typeparam name="TCommand">The type of the commands generated by the connection.</typeparam>
            <typeparam name="TReader">The type of reader created by the command.</typeparam>
            <typeparam name="TDbType">The DB type enum to use for parameters.</typeparam>
            <typeparam name="TThis">The type of this class in order to facilitate proper expressive notation.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Concat``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
            Utility for simplifying param concatenation.
            </summary>
            <typeparam name="T">The type of the enumerable.</typeparam>
            <param name="first">The first value.</param>
            <param name="remaining">The remaining values.</param>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.ConnectionProvider">
            <summary>
            The connection provider to used to acquire connections.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Transaction">
            <summary>
            The transaction to execute commands on if not using a connection factory.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(Open.Database.Extensions.IDbConnectionPool{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommandBase`5"/>.</summary>
            <param name="connectionPool">The pool to acquire connections from.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(Open.Database.Extensions.IDbConnectionFactory{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommandBase`5"/>.</summary>
            <param name="connFactory">The factory to generate connections from.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(`0,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommandBase`5"/>.</summary>
            <param name="connection">The connection to execute the command on.</param>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(`0,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommandBase`5"/>.</summary>
            <param name="connection">The connection to execute the command on.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.#ctor(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveCommandBase`5"/>.</summary>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Command">
            <summary>
            The command text or procedure name to use.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Type">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Params">
            <summary>
            The list of params to apply to the command before execution.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Timeout">
            <summary>
            The command timeout value.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.PrepareCommand(`0)">
            <summary>
            Creates the expected command type from the connection provided.
            </summary>
            <param name="connection">The connection to create the command from.</param>
            <returns>The new command to use.</returns>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.CancellationToken">
            <summary>
            The optional cancellation token to use with supported methods.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.UseCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Sets the cancellation token.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParam(System.String,System.Object,`3)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParam(System.String,System.Object)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParam``1(System.String,System.Nullable{``0},`3)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParam``1(System.String,System.Nullable{``0})">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParam(System.String)">
            <summary>
            Adds a parameter to the params list.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParamIf``1(System.Boolean,System.String,System.Nullable{``0})">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParamIf(System.Boolean,System.String,System.Object)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParamIf(System.Boolean,System.String,System.Object,`3)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParamIf``1(System.Boolean,System.String,System.Nullable{``0},`3)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The database type of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParamIf(System.Boolean,System.String)">
            <summary>
            Conditionally adds a parameter to the params list.
            </summary>
            <param name="condition">The condition to add the param by.  Only adds if true.</param>
            <param name="name">The name of the parameter.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.AddParams(`1)">
            <summary>
            Handles adding the list of parameters to a new command.
            </summary>
            <param name="command">The command to add parameters to.</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.SetTimeout(System.UInt16)">
            <summary>
            Sets the timeout value.
            </summary>
            <param name="seconds">The number of seconds to wait before the connection times out.</param>
            <returns>This instance for use in method chaining.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Execute(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Execute``1(System.Func{`1,``0})">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteAsync(System.Func{`1,System.Threading.Tasks.ValueTask})">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteAsync``1(System.Func{`1,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.EnsureReaderType``1(``0)">
            <summary>
            Validates and properly acquires the expected type of the reader.
            </summary>
            <typeparam name="TActual">The actual type of the reader.</typeparam>
            <param name="reader">The reader to cast.</param>
            <returns>The expected reader.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReader(System.Action{`2},System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReader``1(System.Func{`2,``0},System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReaderAsync(System.Action{`2},System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReaderAsync``1(System.Func{`2,``0},System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReaderAsync(System.Func{`2,System.Threading.Tasks.ValueTask},System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReaderAsync``1(System.Func{`2,System.Threading.Tasks.ValueTask{``0}},System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReturn">
            <summary>
            Calls ExecuteNonQuery on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReturn``1">
            <summary>
            Calls ExecuteNonQuery on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReturnAsync">
            <summary>
            Calls ExecuteNonQueryAsync on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteReturnAsync``1">
            <summary>
            Calls ExecuteNonQueryAsync on the underlying command but sets up a return parameter and returns that value.
            </summary>
            <returns>The value from the return parameter.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteNonQuery">
            <summary>
            Calls ExecuteNonQuery on the underlying command.
            </summary>
            <returns>The integer response from the method. (Records updated.)</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteScalar">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteScalar``1">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.ExecuteScalar``1(System.Func{System.Object,``0})">
            <summary>
            Calls ExecuteScalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveCommandBase`5.Param">
            <summary>
            A struct that represents the param to be created when the command is executed.
            TDbType facilitates the difference between DbType and SqlDbType.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Param.Name">
            <summary>
            The name of the param.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Param.Value">
            <summary>
            The value of the param.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveCommandBase`5.Param.Type">
            <summary>
            The DbType of the param.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Param.Equals(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Param.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Param.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Param.op_Equality(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param,Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveCommandBase`5.Param.op_Inequality(Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param,Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveDbCommand">
            <summary>
            An abstraction for executing commands on a database using best practices and simplified expressive syntax.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(Open.Database.Extensions.IDbConnectionPool{System.Data.Common.DbConnection},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(Open.Database.Extensions.IDbConnectionFactory{System.Data.Common.DbConnection},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(System.Data.Common.DbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.#ctor(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Data.DbType,Open.Database.Extensions.ExpressiveDbCommand}.Param})">
            <summary>Constructs a <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/>.</summary>
            <inheritdoc />
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommand.AddParams(System.Data.Common.DbCommand)">
            <inheritdoc />
        </member>
        <member name="T:Open.Database.Extensions.ExpressiveDbCommandBase`5">
            <summary>
            An base class for executing commands on a database using best practices and simplified expressive syntax.
            Includes methods for use with DbConnection and DbCommand types.
            </summary>
            <typeparam name="TConnection">The type of the connection to be used.</typeparam>
            <typeparam name="TCommand">The type of the commands generated by the connection.</typeparam>
            <typeparam name="TReader">The type of reader created by the command.</typeparam>
            <typeparam name="TDbType">The DB type enum to use for parameters.</typeparam>
            <typeparam name="TThis">The type of this class in order to facilitate proper expressive notation.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.#ctor(Open.Database.Extensions.IDbConnectionPool{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a an expressive command.</summary>
            <param name="connectionPool">The pool to acquire connections from.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.#ctor(Open.Database.Extensions.IDbConnectionFactory{`0},System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a an expressive command.</summary>
            <param name="connFactory">The factory to generate connections from.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.#ctor(`0,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a an expressive command.</summary>
            <param name="connection">The connection to execute the command on.</param>
            <param name="transaction">The optional transaction to execute the command on.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.#ctor(`0,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a an expressive command.</summary>
            <param name="connection">The connection to execute the command on.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.#ctor(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{Open.Database.Extensions.ExpressiveCommandBase{`0,`1,`2,`3,`4}.Param})">
            <summary>Constructs a an expressive command.</summary>
            <param name="transaction">The transaction to execute the command on.</param>
            <param name="type">The command type.</param>
            <param name="command">The SQL command.</param>
            <param name="params">The list of params</param>
        </member>
        <member name="P:Open.Database.Extensions.ExpressiveDbCommandBase`5.UseAsyncRead">
            <summary>
            By default (false), for async methods, the underlying iteration operation for a reader will be .Read() whenever possible.  If set to true, .ReadAsync() will be used.
            Using .ReadAsync() can introduce unexpected latency and additional CPU overhead.
            This should only be set to true if there is a clear reason why and should be profiled before and after.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.EnableAsyncRead(System.Boolean)">
            <summary>
            Sets the UseAsyncRead value.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ExecuteNonQueryAsync">
            <summary>
            Calls ExecuteNonQueryAsync on the underlying command.
            </summary>
            <returns>The integer response from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ExecuteScalarAsync">
            <summary>
            Calls ExecuteScalarAsync on the underlying command.
            </summary>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ExecuteScalarAsync``1(System.Func{System.Object,``0})">
            <summary>
            Asynchronously executes scalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <param name="transform">The transform function for the result.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ExecuteScalarAsync``1">
            <summary>
            Asynchronously executes scalar on the underlying command and casts to the expected type.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ExecuteScalarAsync``1(System.Func{System.Object,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Asynchronously executes scalar on the underlying command.
            </summary>
            <typeparam name="T">The type expected.</typeparam>
            <param name="transform">The transform function (task) for the result.</param>
            <returns>The value returned from the method.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.TakeAsync``1(System.Func{System.Data.IDataRecord,``0},System.Int32,System.Data.CommandBehavior)">
            <summary>
            Asynchronously iterates a IDataReader and returns the each result until the count is met.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <param name="count">The maximum number of records before complete.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.FirstOrdinalResultsAsync">
            <summary>
            Reads the first column from every record and returns the results as a list..
            <see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.FirstOrdinalResultsAsync``1">
            <summary>
            Reads the first column from every record..
            <see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.RetrieveAsync(System.Int32,System.Int32[])">
            <summary>
            Asynchronously iterates all records within the current result set using an IDataReader and returns the desired results.
            </summary>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.RetrieveAsync(System.String,System.String[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            </summary>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ToListAsync``1(System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Asynchronously returns all records via a transform function.
            </summary>
            <param name="transform">The desired column names.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ResultsAsync``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ResultsAsync``1(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.RetrieveAsync">
            <summary>
            Asynchronously iterates all records within the first result set using an IDataReader and returns the results.
            </summary>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.RetrieveAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Asynchronously iterates all records within the current result set using an IDataReader and returns the desired results.
            </summary>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.RetrieveAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            </summary>
            <param name="columnNames">The column names to select.</param>
            <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ExpressiveDbCommandBase`5.ResultsAsync``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="T:Open.Database.Extensions.CommandExtensions">
            <summary>
            Core non-DB-specific extensions for retrieving data from a command using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Shortcut for adding a command parameter.
            </summary>
            <param name="target">The command to add a parameter to.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>The created <see cref="T:System.Data.IDbDataParameter"/>.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.AddParameterType(System.Data.IDbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Shortcut for adding a typed (non-input) command parameter.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.AddReturnParameter(System.Data.IDbCommand,System.Data.DbType,System.String)">
            <summary>
            Shortcut for adding command a typed return parameter.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.AddReturnParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Shortcut for adding command a return parameter.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToList``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records using an <see cref="T:System.Data.IDataReader"/> and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToList``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToList``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{``0}},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates all records using an <see cref="T:System.Data.IDataReader"/> and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToListAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToArray``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates all records using an <see cref="T:System.Data.IDataReader"/> and returns the desired results as an array.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToArray``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToArray``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})" />
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToImmutableArray``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToArray``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})" />
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToImmutableArray``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ToArray``1(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0})" />
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToDataTable(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Loads all data from a command through an <see cref="T:System.Data.IDataReader"/> into a DataTable.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The resultant DataTable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ToDataTables(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Loads all data from a command through an <see cref="T:System.Data.IDataReader"/> into a DataTables.
            Calls .NextResult() to check for more results.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The resultant list of DataTables.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReader(System.Data.IDbCommand,System.Action{System.Data.IDataReader},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReader``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <remarks>The default behavior will open a connection, execute the reader and close the connection it if was not already open.</remarks>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="transform">The transform function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Action{System.Data.Common.DbDataReader},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync(System.Data.IDbCommand,System.Func{System.Data.IDataReader,System.Threading.Tasks.ValueTask},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Action{System.Data.Common.DbDataReader},System.Data.CommandBehavior,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.ValueTask},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync(System.Data.Common.DbCommand,System.Action{System.Data.Common.DbDataReader},System.Data.CommandBehavior,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="transform">The transform function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,System.Threading.Tasks.ValueTask{``0}},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="transform">The transform function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandBehavior,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.ValueTask{``0}},System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ExecuteReaderAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandBehavior,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.IterateReader``2(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Data.CommandBehavior)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.IterateReader``2(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.IterateReader``2(System.Data.IDbCommand,System.Data.CommandBehavior,System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="TEntity">The return type of the transform function applied to each record.</typeparam>
            <typeparam name="TResult">The type returned by the selector.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="transform">The transform function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="selector">Provides an IEnumerable&lt;TEntity&gt; to select individual results by.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ExecuteReader``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0},System.Data.CommandBehavior)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.IterateReader(System.Data.IDbCommand,System.Data.CommandBehavior,System.Action{System.Data.IDataRecord})">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> on a command with a handler function.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.IterateReader(System.Data.IDbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.IterateReader(System.Data.IDbCommand,System.Data.CommandBehavior,System.Action{System.Data.IDataRecord})"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.IterateReaderWhile(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> on a command while the predicate returns true.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="predicate">The handler function that processes each <see cref="T:System.Data.IDataRecord"/> and decides if iteration should continue.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates all records from an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.ForEachAsync(System.Data.Common.DbCommand,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.IterateReaderWhileAsync(System.Data.Common.DbCommand,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{System.Boolean}},System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates an <see cref="T:System.Data.IDataReader"/> on a command while the predicate returns true.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="predicate">The handler function that processes each <see cref="T:System.Data.IDataRecord"/> and decides if iteration should continue.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.First``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> and returns the first result through a transform function.
            </summary>
            <remarks>Throws an <see cref="T:System.InvalidOperationException"/> if there are no results.</remarks>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.FirstOrDefault``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <remarks>Returns <c>default(T)</c> if thre are no results.</remarks>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.First``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.Single``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <remarks>Throws an <see cref="T:System.InvalidOperationException"/> if there is anything other than a single result.</remarks>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.First``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.SingleOrDefault``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <remarks>
            Returns <c>default(T)</c> if thre are no results.
            Throws an <see cref="T:System.InvalidOperationException"/> if there is more than one result.
            </remarks>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.FirstOrDefault``1(System.Data.IDbCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.Take``1(System.Data.IDbCommand,System.Int32,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> and returns the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="count">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The results from the transform limited by the take count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.Skip``1(System.Data.IDbCommand,System.Int32,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> and skips the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="count">The number of records to skip.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The results from the transform after the skip count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.SkipThenTake``1(System.Data.IDbCommand,System.Int32,System.Int32,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> and skips by the skip parameter returns the maximum remaining defined by the take parameter.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="skip">The number of entries to skip before starting to take results.</param>
            <param name="take">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The results from the skip, transform and take operation.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResults(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResults``1(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResults``1(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <typeparam name="T0">The expected type of the first ordinal.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResultsAsync(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <inheritdoc cref="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CommandExtensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads the first column from every record.
            </summary>
            <typeparam name="T0">The expected type of the first ordinal.</typeparam>
            <remarks>Any <see cref="T:System.DBNull"/> values are then converted to null and casted to type <typeparamref name="T0"/>.</remarks>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate a reader from.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="T:Open.Database.Extensions.ConnectionExtensions">
            <summary>
            Core non-DB-specific extensions for database connections.
            </summary>
            <summary>
            Core non-DB-specific extensions for acquiring and operating on different connection factories.
            </summary>
            <summary>
            Core non-DB-specific extensions for acquiring and operating on different connection factories.
            </summary>
            <summary>
            Core non-DB-specific extensions for acquiring and operating on different connection factories.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an <see cref="T:System.Data.IDbCommand"/> from any <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <param name="connection">The connection to create a command from.</param>
            <param name="type">The command type.  <see cref="F:System.Data.CommandType.Text"/>, <see cref="F:System.Data.CommandType.StoredProcedure"/>, or <see cref="F:System.Data.CommandType.TableDirect"/>.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.CreateTextCommand(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text <see cref="T:System.Data.IDbCommand"/> from any <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.CreateStoredProcedureCommand(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure <see cref="T:System.Data.IDbCommand"/> from any <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an <see cref="T:System.Data.Common.DbCommand"/> from any <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.CreateTextCommand(System.Data.Common.DbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text <see cref="T:System.Data.Common.DbCommand"/> from any <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.CreateStoredProcedureCommand(System.Data.Common.DbConnection,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure <see cref="T:System.Data.Common.DbCommand"/> from any <see cref="T:System.Data.Common.DbConnection"/>.s
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.CreateCommand(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpen(System.Data.IDbConnection)">
            <returns>The prior connection state.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpenAsync(System.Data.Common.DbConnection,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpenAsync(System.Data.Common.DbConnection,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            If the connection isn't open, opens the connection.<br/>
            If the connection is in neither open or close, first closes the connection, then opens it.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="configureAwait">If true (default) will retain the context after opening.</param>
            <param name="cancellationToken">An cancellation token to cancel opening.</param>
            <returns>A task containing the prior connection state.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpenAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpenAsync(System.Data.Common.DbConnection,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpenAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.EnsureOpenAsync(System.Data.Common.DbConnection,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(System.Data.IDbConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> for subsequent configuration and execution.
            </summary>
            <param name="connection">The connection to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. The default is <see cref="F:System.Data.CommandType.Text"/>.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(System.Data.IDbTransaction,System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> for subsequent configuration and execution.
            </summary>
            <param name="transaction">The transaction to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. The default is <see cref="F:System.Data.CommandType.Text"/>.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> for subsequent configuration and execution.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Command(System.Data.IDbConnection,System.String,System.Data.CommandType)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(System.Data.Common.DbTransaction,System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> for subsequent configuration and execution.
            </summary>
            <param name="transaction">The transaction to execute the command on.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Data.IDbConnection,System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <param name="connection">The connection to execute the command on.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Data.IDbTransaction,System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <param name="transaction">The transaction to execute the command on.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Data.IDbConnection,System.String)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Data.IDbTransaction,System.String)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(Open.Database.Extensions.IDbConnectionFactory,System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> for subsequent configuration and execution.
            </summary>
            <param name="connectionSource">The connection factory to generate connections and subsequently commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(Open.Database.Extensions.IDbConnectionFactory,System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <param name="connectionSource">The connection factory to generate connections and subsequently commands from.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(Open.Database.Extensions.IDbConnectionPool,System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> for subsequent configuration and execution.
            </summary>
            <param name="connectionSource">The connection pool to take connections from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(Open.Database.Extensions.IDbConnectionPool,System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <param name="connectionSource">The connection pool to take connections from.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> for subsequent configuration and execution.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionSource">The connection factory to generate connections and subsequently commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionSource">The connection factory to generate connections and subsequently commands from.</param>
            <param name="procedureName">The stored procedure name to use.</param>
            <returns>The resultant ExpressiveDbCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command``1(Open.Database.Extensions.IDbConnectionPool{``0},System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> for subsequent configuration and execution.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionSource">The connection pool to take connections from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure``1(Open.Database.Extensions.IDbConnectionPool{``0},System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionSource">The connection pool to take connections from.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command(System.Func{System.Data.IDbConnection},System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> for subsequent configuration and execution.
            </summary>
            <param name="connectionSource">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure(System.Func{System.Data.IDbConnection},System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <param name="connectionSource">The connection factory to generate a commands from.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Command``1(System.Func{``0},System.String,System.Data.CommandType)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> for subsequent configuration and execution.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionSource">The connection factory to generate a commands from.</param>
            <param name="command">The command text or stored procedure name to use.</param>
            <param name="type">The command type. Default = CommandType.Text.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.StoredProcedure``1(System.Func{``0},System.String)">
            <summary>
            Creates an <see cref="T:Open.Database.Extensions.ExpressiveDbCommand"/> with command type set to <see cref="F:System.Data.CommandType.StoredProcedure"/> for subsequent configuration and execution.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionSource">The connection factory to generate a commands from.</param>
            <param name="procedureName">The stored procedure name to use.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``1(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,``0})">
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})">
            <summary>
            Generates a connection. Ensures it's open. Invokes the action.<br/>
            Ensures the connection is disposed of when the action is complete.
            </summary>
            <remarks>Useful for single-line operations.</remarks>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,``1})">
            <typeparam name="TConnection">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Action{``0})">
            <typeparam name="TConnection">The connection type.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``1(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Data.ConnectionState,``0})">
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection,System.Data.ConnectionState})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection,System.Data.ConnectionState})">
            <summary>
            Acquires a connection from the pool. Ensures it's open. Invokes the action.<br/>
            Ensures the connection is returned to the pool when the action is complete.
            </summary>
            <param name="connectionPool">The connection pool to acquire connections from.</param>
            <param name="action">The action to execute.</param>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``2(Open.Database.Extensions.IDbConnectionPool{``0},System.Func{``0,System.Data.ConnectionState,``1})">
            <typeparam name="TConnection">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection,System.Data.ConnectionState})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``1(Open.Database.Extensions.IDbConnectionPool{``0},System.Action{``0,System.Data.ConnectionState})">
            <typeparam name="TConnection">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection,System.Data.ConnectionState})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``2(System.Func{``0},System.Func{``0,``1})">
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open``1(System.Func{``0},System.Action{``0})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Open``1(System.Func{``0},System.Action{``0})">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``1(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Generates a connection. Ensures it's open. Invokes the action.<br/>
            Ensures the connection is disposed of when the action is complete.
            </summary>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Action{``0})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <typeparam name="TConnection">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``1(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Data.ConnectionState,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Data.ConnectionState,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Data.ConnectionState,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Acquires a connection from the pool. Ensures it's open. Invokes the action.<br/>
            Ensures the connection is returned to the pool when the action is complete.
            </summary>
            <param name="connectionPool">The connection pool to acquire connections from.</param>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Open``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``2(Open.Database.Extensions.IDbConnectionPool{``0},System.Func{``0,System.Data.ConnectionState,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <typeparam name="TConnection">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Data.ConnectionState,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``1(Open.Database.Extensions.IDbConnectionPool{``0},System.Func{``0,System.Data.ConnectionState,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <typeparam name="TConnection">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Data.ConnectionState,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``2(System.Func{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Generates a connection. Ensures it's open. Invokes the action.
            Ensures the connection is disposed of when the action is complete.
            Useful for single-line operations.
            </summary>
            <typeparam name="TConnection">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The value from the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync``1(System.Func{``0},System.Func{``0,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.OpenAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``1(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,``0})">
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})">
            <summary>
            Generates a connection and executes the action within a using statement.
            </summary>
            <remarks>Useful for single-line operations.</remarks>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,``1})">
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Action{``0})">
            <typeparam name="TConn">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``1(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,``0})">
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})">
            <summary>
            Acquires a connection from the pool, returning it after the action is complete.
            <remarks>Useful for single-line operations.</remarks>
            </summary>
            <param name="connectionPool">The connection pool to acquire connections from.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``2(Open.Database.Extensions.IDbConnectionPool{``0},System.Func{``0,``1})">
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``1(Open.Database.Extensions.IDbConnectionPool{``0},System.Action{``0})">
            <typeparam name="TConn">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``2(System.Func{``0},System.Func{``0,``1})">
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.Using``1(System.Func{``0},System.Action{``0})">
            <typeparam name="TConn">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``1(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask{``0}})">
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask})">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``2(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using``1(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,``0})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``1(Open.Database.Extensions.IDbConnectionFactory{``0},System.Func{``0,System.Threading.Tasks.ValueTask})">
            <typeparam name="TConn">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``1(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask{``0}})">
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync(Open.Database.Extensions.IDbConnectionPool,System.Func{System.Data.IDbConnection,System.Threading.Tasks.ValueTask})">
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``2(Open.Database.Extensions.IDbConnectionPool{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <returns>The value from the action.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``1(Open.Database.Extensions.IDbConnectionPool{``0},System.Func{``0,System.Threading.Tasks.ValueTask})">
            <typeparam name="TConn">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionPool,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``2(System.Func{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <typeparam name="TConn">The connection type.</typeparam>
            <typeparam name="T">The type returned from the action.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using``1(Open.Database.Extensions.IDbConnectionFactory,System.Func{System.Data.IDbConnection,``0})"/>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionExtensions.UsingAsync``1(System.Func{``0},System.Func{``0,System.Threading.Tasks.ValueTask})">
            <typeparam name="TConn">The connection type.</typeparam>
            <inheritdoc cref="M:Open.Database.Extensions.ConnectionExtensions.Using(Open.Database.Extensions.IDbConnectionFactory,System.Action{System.Data.IDbConnection})"/>
        </member>
        <member name="T:Open.Database.Extensions.DataReaderExtensions">
            <summary>
            Extension methods for Data Readers.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ForEach(System.Data.IDataReader,System.Action{System.Data.IDataRecord},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Iterates all records from an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="throwOnCancellation">If true, when cancelled, may exit the iteration via an exception. Otherwise when cancelled will simply stop iterating and return without exception.</param>
            <param name="cancellationToken">An optional cancellation token for stopping the iteration.</param>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ForEach(System.Data.IDataReader,System.Action{System.Data.IDataRecord},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.ForEach(System.Data.IDataReader,System.Action{System.Data.IDataRecord},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ForEachAsync(System.Data.Common.DbDataReader,System.Action{System.Data.IDataRecord},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Iterates all records from an <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="handler">The handler function for each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ForEachAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.ForEachAsync(System.Data.Common.DbDataReader,System.Action{System.Data.IDataRecord},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ForEachAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.ForEachAsync(System.Data.Common.DbDataReader,System.Action{System.Data.IDataRecord},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Buffers.ArrayPool{System.Object},System.Int32,System.Int32[])"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Buffers.ArrayPool{System.Object})">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Buffers.ArrayPool{System.Object},System.Int32,System.Int32[])"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Buffers.ArrayPool{System.Object})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Buffers.ArrayPool{System.Object})">
            <param name="reader">The reader to enumerate.</param>
            <param name="ordinals">The limited set of ordinals to include.  If none are specified, the returned objects will be empty.</param>
            <param name="arrayPool">The array pool to acquire buffers from.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Buffers.ArrayPool{System.Object},System.Int32,System.Int32[])"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Int32,System.Int32[])">
            <param name="reader">The reader to enumerate.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Buffers.ArrayPool{System.Object},System.Int32,System.Int32[])"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.AsEnumerable(System.Data.IDataReader,System.Buffers.ArrayPool{System.Object},System.Int32,System.Int32[])">
            <summary>
            Provides an enumerable for iterating all the remaining values of the current result set of a data reader.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are retained.</remarks>
            <param name="reader">The reader to enumerate.</param>
            <param name="arrayPool">The array pool to acquire buffers from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>An enumerable of the values returned from a data reader.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken,System.Boolean)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Iterates records from an <see cref="T:System.Data.IDataReader"/> and passes the IDataRecord to a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The reader to iterate.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="cancellationToken">A cancellation token for stopping the iteration.</param>
            <param name="throwOnCancellation">If true, when cancelled, may exit the iteration via an exception. Otherwise when cancelled will simply stop iterating and return without exception.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.Select``1(System.Data.IDataReader,System.Threading.CancellationToken,System.Func{System.Data.IDataRecord,``0},System.Boolean)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken,System.Boolean)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToList``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken)">
            <summary>
            Shortcut for .Iterate(transform).ToList();
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A list of the transformed results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToListAsync``1(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates all records using the data reader and returns the desired results as a list.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The SqlDataReader to read from.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task containing a list of all results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToListAsync``1(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.ToListAsync``1(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,``0},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToArray``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Shortcut for .Select(transform).ToArray();
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <returns>An array of the transformed results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToImmutableArray``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Shortcut for .Select(transform).ToImmutableArray();
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="transform">The transform function to process each <see cref="T:System.Data.IDataRecord"/>.</param>
            <returns>An immutable array of the transformed results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            Loads all remaining data from an <see cref="T:System.Data.IDataReader"/> into a DataTable.
            </summary>
            <param name="reader">The IDataReader to load data from.</param>
            <returns>The resultant DataTable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.ToDataTables(System.Data.IDataReader)">
            <summary>
            Loads all data from a command through an <see cref="T:System.Data.IDataReader"/> into a DataTables.
            Calls .NextResult() to check for more results.
            </summary>
            <param name="reader">The IDataReader to load data from.</param>
            <returns>The resultant list of DataTables.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Iterates an <see cref="T:System.Data.IDataReader"/> while the predicate returns true.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to iterate.</param>
            <param name="predicate">The handler function that processes each <see cref="T:System.Data.IDataRecord"/> and decides if iteration should continue.</param>
            <param name="throwOnCancellation">If true, when cancelled, may exit the iteration via an exception. Otherwise when cancelled will simply stop iterating and return without exception.</param>
            <param name="cancellationToken">An optional cancellation token for stopping the iteration.</param>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.IterateWhileAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.IterateWhileAsync(System.Data.Common.DbDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <param name="reader">The DbDataReader to load data from.</param>
            <param name="predicate">The handler function that processes each <see cref="T:System.Data.IDataRecord"/> and decides if iteration should continue.</param>
            <param name="useReadAsync">If true will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.IterateWhileAsync(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.IterateWhileAsync(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to iterate.</param>
            <param name="predicate">The handler function that processes each <see cref="T:System.Data.IDataRecord"/> and decides if iteration should continue.</param>
            <param name="useReadAsync">If true will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataReaderExtensions.IterateWhile(System.Data.IDataReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.FirstOrdinalResults(System.Data.IDataReader)">
            <summary>
            Reads the first column values from every record.
            <see cref="T:System.DBNull"/> values are then converted to null.
            </summary>
            <returns>The enumerable first ordinal values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.FirstOrdinalResults``1(System.Data.IDataReader)">
            <summary>
            Reads the first column values from every record.
            Any<see cref="T:System.DBNull"/> values are then converted to null and casted to type T0;
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.FirstOrdinalResults``1(System.Data.Common.DbDataReader)">
            <summary>
            Reads the first column values from every record.
            Any<see cref="T:System.DBNull"/> values are then converted to null and casted to type T0;
            </summary>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.FirstOrdinalResultsAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads the first column values from every record.
            <see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The list of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataReaderExtensions.FirstOrdinalResultsAsync``1(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads the first column values from every record.
            Any<see cref="T:System.DBNull"/> values are then converted to null and casted to type T0;
            </summary>
            <param name="reader">The IDataReader to iterate.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="T:Open.Database.Extensions.DataRecordExtensions">
            <summary>
            Extension methods for IDataRecord access.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord)">
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Int32)">
            <summary>
            Returns an array of values with the specified field count.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <param name="arrayLength">The size of the resultant array.</param>
            <returns>The array of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Int32,System.Buffers.ArrayPool{System.Object})">
            <param name="record">The reader to get column names from.</param>
            <param name="minimumArrayLength">The minimum size of the resultant array.</param>
            <param name="arrayPool">The array pool to acquire buffers from.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Buffers.ArrayPool{System.Object})">
            <param name="record">The reader to get column names from.</param>
            <param name="arrayPool">The array pool to acquire buffers from.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.GetValues(System.Data.IDataRecord,System.Int32)"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ColumnNames(System.Data.IDataRecord)">
            <summary>
            Returns all the column names for the current result set.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <returns>The enumerable of column names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetNames(System.Data.IDataRecord)">
            <summary>
            Returns all the column names for the current result set.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <returns>The array of column names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetNames(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns all the column names for the current result set by index provided by the ordinals.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <param name="ordinals">The list (and order) of ordinals to look up.</param>
            <returns>The array of column names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.OrdinalMapping(System.Data.IDataRecord)">
            <summary>
            Returns the (name,ordinal) mapping for current result set.
            </summary>
            <param name="record">The reader to get column names from.</param>
            <returns>An enumerable of the mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.OrdinalMapping(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an array of name to ordinal mappings.
            </summary>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <returns>An enumerable of the mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.OrdinalMapping(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an array of name to ordinal mappings.
            </summary>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <param name="sort">If true, will order the results by ordinal ascending.</param>
            <returns>An enumerable of the mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetOrdinalMapping(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an array of name to ordinal mappings.
            </summary>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <param name="sort">If true, will order the results by ordinal ascending.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValues(System.Data.IDataRecord)">
            <summary>
            Produces an array of values based upon their ordinal positions.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Produces a selective set of column values based upon the desired ordinal positions.
            </summary>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query.</param>
            <param name="ordinals">The set of ordinals to query.</param>
            <returns>An enumerable of values matching the ordinal positions requested.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IList{System.Int32})">
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Int32,System.Int32[])">
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query.</param>
            <param name="firstOrdinal">The first ordinal to query.</param>
            <param name="remainingOrdinals">The remaining set of ordinals to query.</param>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValuesFromOrdinals(System.Data.IDataRecord,System.ReadOnlySpan{System.Int32}@,System.Span{System.Object})">
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query.</param>
            <param name="ordinals">The list of ordinals to query.</param>
            <param name="values">The target to store the values.</param>
            <returns>The provided span, updated with values matching the ordinal positions requested.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.EnumerateValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValuesFromOrdinals``1(System.Data.IDataRecord,System.Collections.Generic.IList{System.Int32},``0)">
            <returns>The provided list, updated with values matching the ordinal positions requested.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.GetValuesFromOrdinals(System.Data.IDataRecord,System.ReadOnlySpan{System.Int32}@,System.Span{System.Object})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetValuesFromOrdinals(System.Data.IDataRecord,System.Collections.Generic.IList{System.Int32})">
            <returns>An array of values matching the ordinal positions requested.</returns>
            <inheritdoc cref="M:Open.Database.Extensions.DataRecordExtensions.GetValuesFromOrdinals(System.Data.IDataRecord,System.ReadOnlySpan{System.Int32}@,System.Span{System.Object})"/>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.MatchingOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an enumerable of name to ordinal mappings.
            </summary>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <param name="sort">If true, will order the results by ordinal ascending.</param>
            <returns>The enumerable of name to ordinal mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetMatchingOrdinals(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an array of name to ordinal mappings.
            </summary>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to query the ordinals from.</param>
            <param name="columnNames">The requested column names.</param>
            <param name="sort">If true, will order the results by ordinal ascending.</param>
            <returns>The array of name to ordinal mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.DataTypeNames(System.Data.IDataRecord)">
            <summary>
            Returns all the data type names for the columns of current result set.
            </summary>
            <param name="record">The reader to get data type names from.</param>
            <returns>The enumerable of data type names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.GetDataTypeNames(System.Data.IDataRecord)">
            <summary>
            Returns all the data type names for the columns of current result set.
            </summary>
            <param name="record">The reader to get data type names from.</param>
            <returns>The array of data type names.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="columnMap">The column ids and resultant names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Int32}})">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="ordinalMapping">The column ids and resultant names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IList{System.ValueTuple{System.String,System.Int32}})">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="ordinalMapping">The column ids and resultant names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.ReadOnlySpan{System.ValueTuple{System.String,System.Int32}}@)">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="ordinalMapping">The column ids and resultant names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.Collections.Generic.IList{System.String})">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.DataRecordExtensions.ToDictionary(System.Data.IDataRecord,System.ReadOnlySpan{System.String}@)">
            <summary>
            Returns the specified column data of <see cref="T:System.Data.IDataRecord"/> as a Dictionary.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are converted to null.</remarks>
            <param name="record">The <see cref="T:System.Data.IDataRecord"/> to extract values from.</param>
            <param name="columnNames">The column names to query.</param>
            <returns>The resultant Dictionary of values.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteReaderExtensions">
            <summary>
            Core non-DB-specific extensions for retrieving data from a command using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.IterateReader(Open.Database.Extensions.IExecuteReader,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.IterateReaderWhile(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command while the handler function returns true.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.IterateReaderAsync(Open.Database.Extensions.IExecuteReaderAsync,System.Action{System.Data.IDataRecord},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command with a handler function.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.IterateReaderWhileAsync(Open.Database.Extensions.IExecuteReaderAsync,System.Func{System.Data.IDataRecord,System.Boolean},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command while the handler function returns true.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.IterateReaderWhileAsync(Open.Database.Extensions.IExecuteReaderAsync,System.Func{System.Data.IDataRecord,System.Threading.Tasks.ValueTask{System.Boolean}},System.Data.CommandBehavior)">
            <summary>
            Iterates a reader on a command while the handler function returns true.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="handler">The handler function for each IDataRecord.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.IterateReader``2(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="TEntity">The return type of the transform function applied to each record.</typeparam>
            <typeparam name="TResult">The type returned by the selector.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="selector">Provides an IEnumerable&lt;TEntity&gt; to select individual results by.</param>
            <param name="behavior">The behavior to use with the data reader.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.First``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first result through a transform function.  Throws if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.FirstOrDefault``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first result through a transform function.  Returns default(T) if none.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Single``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates a IDataReader and returns the first result through a transform function.  Throws if none or more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.SingleOrDefault``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first result through a transform function.  Returns default(T) if none.  Throws if more than one entry.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The value from the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Take``1(Open.Database.Extensions.IExecuteReader,System.Int32,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and returns the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="count">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The results from the transform limited by the take count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Skip``1(Open.Database.Extensions.IExecuteReader,System.Int32,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and skips the first number of results defined by the count.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="count">The number of records to skip.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The results from the transform after the skip count.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.SkipThenTake``1(Open.Database.Extensions.IExecuteReader,System.Int32,System.Int32,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Iterates an IDataReader and skips by the skip parameter returns the maximum remaining defined by the take parameter.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="skip">The number of entries to skip before starting to take results.</param>
            <param name="take">The maximum number of records to return.</param>
            <param name="transform">The transform function to process each IDataRecord.</param>
            <returns>The results from the skip, transform and take operation.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.ToList``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Converts all IDataRecords into a list using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.ToArray``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Converts all IDataRecords into an array using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The array of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.ToImmutableArray``1(Open.Database.Extensions.IExecuteReader,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Converts all IDataRecords into an immutable array using a transform function.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="transform">The transform function.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The array of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Retrieve(Open.Database.Extensions.IExecuteReader)">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the results.
            <see cref="T:System.DBNull"/> values are left unchanged (retained).
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Retrieve(Open.Database.Extensions.IExecuteReader,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            <see cref="T:System.DBNull"/> values are left unchanged (retained).
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Retrieve(Open.Database.Extensions.IExecuteReader,System.Int32,System.Int32[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            <see cref="T:System.DBNull"/> values are left unchanged (retained).
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Retrieve(Open.Database.Extensions.IExecuteReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Iterates all records within the first result set using an IDataReader and returns the desired results as a list of Dictionaries containing only the specified column values.
            <see cref="T:System.DBNull"/> values are left unchanged (retained).
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="columnNames">The column names to select.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Retrieve(Open.Database.Extensions.IExecuteReader,System.String,System.String[])">
            <summary>
            Iterates all records within the current result set using an IDataReader and returns the desired results.
            <see cref="T:System.DBNull"/> values are left unchanged (retained).
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <returns>The QueryResult that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Results``1(Open.Database.Extensions.IExecuteReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Results``1(Open.Database.Extensions.IExecuteReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.Results``1(Open.Database.Extensions.IExecuteReader,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.FirstOrdinalResults(Open.Database.Extensions.IExecuteReader)">
            <summary>
            Reads the first column from every record and returns the results as a list..
            <see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <returns>The list of transformed records.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.FirstOrdinalResults``1(Open.Database.Extensions.IExecuteReader)">
            <summary>
            Reads the first column from every record..
            <see cref="T:System.DBNull"/> values are converted to null.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <returns>The enumerable of casted values.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.LoadTable(Open.Database.Extensions.IExecuteReader)">
            <summary>
            Imports all data using an IDataReader into a DataTable.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <returns>The resultant DataTable.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReaderExtensions.LoadTables(Open.Database.Extensions.IExecuteReader)">
            <summary>
            Loads all data from a command through an IDataReader into a DataTables.
            Calls .NextResult() to check for more results.
            </summary>
            <param name="command">The IExecuteReader to iterate.</param>
            <returns>The resultant list of DataTables.</returns>
        </member>
        <member name="T:Open.Database.Extensions.CoreExtensions">
            <summary>
            Core non-DB-specific extensions for building a command and retrieving data using best practices.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Results``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Results``1(System.Data.IDataReader,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Results``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBuffered``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBuffered``1(System.Data.IDataReader,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBuffered``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Results``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Results``1(System.Data.IDbCommand,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Results``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBufferedAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBufferedAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBufferedAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBufferedAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBufferedAsync``1(System.Data.Common.DbDataReader,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsBufferedAsync``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsAsync``1(System.Data.Common.DbCommand,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Asynchronously returns all records and iteratively attempts to map the fields to type T.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <param name="fieldMappingOverrides">An override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>A task containing the list of results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsFromDataTable``1(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Loads all data into a DataTable before Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="reader">The IDataReader to read results from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ResultsFromDataTable``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Loads all data into a DataTable before Iterates each record and attempts to map the fields to type T.
            Data is temporarily stored (buffered in entirety) in a queue before applying the transform for each iteration.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="command">The command to generate a reader from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <returns>The enumerable to pull the transformed results from.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Iterates all records within the current result set using an <see cref="T:System.Data.IDataReader"/> and returns the desired results.
            </summary>
            <remarks><see cref="T:System.DBNull"/> values are left unchanged (retained).</remarks>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read results from.</param>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <returns>The query result that contains all the results and the column mappings.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Int32,System.Int32[])">
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read results from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.String})">
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read results from.</param>
            <param name="columnNames">The column names to select.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.String,System.String[])">
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read results from.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate the reader from.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> flags to use with the data reader.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Executes a reader and iterates all records within the remaining result set using an <see cref="T:System.Data.IDataReader"/> and returns the desired results.
            </summary>
            <remarks>
            <para><see cref="T:System.DBNull"/> values are left unchanged (retained).</para>
            <para>The default behavior will open a connection, execute the reader and close the connection it if was not already open.</para></remarks>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate the reader from.</param>
            <param name="ordinals">The ordinals to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Int32,System.Int32[])">
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate the reader from.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.String})">
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate the reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.String,System.String[])">
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to generate the reader from.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <param name="reader">The reader to enumerate.</param>
            <param name="ordinals">The limited set of ordinals to include.  If none are specified, the returned objects will be empty.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Int32,System.Int32[])">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.Int32,System.Int32[])" />
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.Int32,System.Int32[])">
            <param name="reader">The reader to enumerate.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates all records within the current result set using an <see cref="T:System.Data.Common.DbDataReader"/> and returns the desired results.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to read results from.</param>
            <param name="columnNames">The column names to select.</param>
            <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDataReader,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.String,System.String[])">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.String,System.String[])"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken,System.String,System.String[])">
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read results from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="c">The first column name to include in the request to the reader for each record.</param>
            <param name="others">The remaining column names to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a reader and enumerates all the remaining values of the current result set and returns the desired results.
            </summary>
            <param name="command">The command to generate a reader from.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.Retrieve(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <param name="command">The command to generate a reader from.</param>
            <param name="ordinals">The limited set of ordinals to include.  If none are specified, the returned objects will be empty.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Int32,System.Int32[])">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.Int32,System.Int32[])"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.Int32,System.Int32[])">
            <param name="command">The command to generate a reader from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="n">The first ordinal to include in the request to the reader for each record.</param>
            <param name="others">The remaining ordinals to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="columnNames">The column names to select.</param>
            <param name="normalizeColumnOrder">Orders the results arrays by ordinal.</param>
            <param name="useReadAsync">If true (default) will iterate the results using .ReadAsync() otherwise will only Execute the reader asynchronously and then use .Read() to iterate the results but still allowing cancellation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.String,System.String[])">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.String,System.String[])"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.String,System.String[])">
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to generate a reader from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="columnName">The first column name to include in the request to the reader for each record.</param>
            <param name="otherColumnNames">The remaining column names to request from the reader for each record.</param>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.RetrieveAsync(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.DBNullToNull(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Any <see cref="T:System.DBNull"/> values are yielded as null.
            </summary>
            <param name="values">The source enumerable.</param>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.DBNullToNullCopy(System.Object[])">
            <summary>
            Returns a copy of <paramref name="values"/> with any <see cref="T:System.DBNull"/> values converted to null.
            </summary>
            <param name="values">The source values.</param>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.DBNullToNullCopy(System.ReadOnlySpan{System.Object}@)">
            <summary>
            Returns a copy of the contents of this span as an array with any <see cref="T:System.DBNull"/> values converted to null.
            </summary>
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.DBNullToNullCopy(System.Object[])"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.DBNullToNullCopy(System.Span{System.Object}@)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.DBNullToNullCopy(System.ReadOnlySpan{System.Object}@)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ReplaceDBNullWithNull(System.Span{System.Object})">
            <summary>
            Replaces any <see cref="T:System.DBNull"/> in the <paramref name="values"/> with null;
            </summary>
            <param name="values">The source values.</param>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.ReplaceDBNullWithNull(System.Object[])">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.ReplaceDBNullWithNull(System.Span{System.Object})"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.AsEnumerable(System.Data.DataColumnCollection)">
            <summary>
            Generic enumerable extension for <see cref="T:System.Data.DataColumnCollection"/>.
            </summary>
            <param name="columns">The column collection.</param>
            <returns>An enumerable of <see cref="T:System.Data.DataColumn"/>s.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.AsEnumerable(System.Data.DataRowCollection)">
            <summary>
            Generic enumerable extension for <see cref="T:System.Data.DataRowCollection"/>.
            </summary>
            <param name="rows">The row collection.</param>
            <returns>An enumerable of <see cref="T:System.Data.DataRow"/>s.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.To``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Boolean)">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.To``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.To``1(System.Data.DataTable,System.ValueTuple{System.String,System.String}[])">
            <inheritdoc cref="M:Open.Database.Extensions.CoreExtensions.To``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)"/>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.To``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Loads all data into a queue before iterating (dequeuing) the results as type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The model type to map the values to (using reflection).</typeparam>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to read from.</param>
            <param name="fieldMappingOverrides">An optional override map of field names to column names where the keys are the property names, and values are the column names.</param>
            <param name="clearSourceTable">Clears the source table before providing the enumeration.</param>
            <returns>An enumerable used to iterate the results.</returns>
        </member>
        <member name="M:Open.Database.Extensions.CoreExtensions.DequeueEach``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Useful extension for dequeuing items from a queue.
            Not thread safe but queueing/dequeuing items in between items is supported.
            </summary>
            <typeparam name="T">Return type of the source queue</typeparam>
            <returns>An enumerable of the items contained within the queue.</returns>
        </member>
        <member name="T:Open.Database.Extensions.TransactionExtensions">
            <summary>
            Core non-DB-specific extensions for database transactions.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.CreateCommand(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an IDbCommand from any IDbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.CreateTextCommand(System.Data.IDbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text IDbCommand from any IDbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.CreateStoredProcedureCommand(System.Data.IDbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure IDbCommand from any IDbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.CreateCommand(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Shortcut for creating an DbCommand from any DbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="type">The command type.  Text, StoredProcedure, or TableDirect.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.CreateTextCommand(System.Data.Common.DbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a text DbCommand from any DbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="commandText">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.CreateStoredProcedureCommand(System.Data.Common.DbTransaction,System.String,System.Int32)">
            <summary>
            Shortcut for creating a stored procedure DbCommand from any DbTransaction.
            </summary>
            <param name="transaction">The transaction to create a command from.</param>
            <param name="procedureName">The command text or stored procedure name to use.</param>
            <param name="secondsTimeout">The number of seconds to wait before the command times out.</param>
            <returns>The created SqlCommand.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true and the optional cancellation token has not been cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value returned from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Boolean},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the conditional action returns true, and the optional cancellation token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.ValueTuple{System.Boolean,``0}}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{``0}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value returned from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the conditional action returns true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value returned from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the conditional action returns true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,``0},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Action{System.Data.Common.DbTransaction},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.ValueTuple{System.Boolean,``0}}},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the 'Commit' value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the value from the action is true.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional``1(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true and the optional cancellation token has not been cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value returned from the conditional action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditional(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Boolean})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the conditional action returns true, and the optional cancellation token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">An optional token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>True if committed.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction``1(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransaction(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync``1(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.ValueTuple{System.Boolean,``0}}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the 'Commit' value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning a 'Commit' value of true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionConditionalAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions, the value from the action is true, and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="conditionalAction">The handler to execute while a transaction is pending. Returning true signals to commit the transaction.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync``1(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <typeparam name="T">The value returned from the action.</typeparam>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
            <returns>The value of the awaited action.</returns>
        </member>
        <member name="M:Open.Database.Extensions.TransactionExtensions.ExecuteTransactionAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Func{System.Data.Common.DbTransaction,System.Threading.Tasks.ValueTask})">
            <summary>
            Begins a transaction before executing the action.  Commits if there are no exceptions and the optional provided token is not cancelled.  Otherwise rolls-back the transaction.
            </summary>
            <param name="connection">The connection to transact with.</param>
            <param name="cancellationToken">A token that if cancelled will cause this transaction to be aborted or rolled-back.</param>
            <param name="action">The handler to execute while a transaction is pending.</param>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionFactory">
            <summary>
            Common interface for creating a connection.  Can easily be used with dependency injection.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionFactory.Create">
            <summary>
            Creates a new connection ready for use.
            </summary>
            <returns>An IDbConnection.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionFactory`1">
            <inheritdoc />
            <typeparam name="TConnection">The actual connection type.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionFactory`1.Create">
            <inheritdoc />
            <returns>An connection of type <typeparamref name="TConnection"/>.</returns>
        </member>
        <member name="T:Open.Database.Extensions.DbConnectionFactoryExtensions">
            <summary>
            Extensions for converting a connection factory into a pool.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactoryExtensions.AsPool(Open.Database.Extensions.IDbConnectionFactory)">
            <summary>
            Provides a connection pool that simply creates from a connection factory and disposes when returned.
            </summary>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactoryExtensions.AsPool``1(Open.Database.Extensions.IDbConnectionFactory{``0})">
            <summary>
            Provides a connection pool that simply creates from a connection factory and disposes when returned.
            </summary>
            <param name="connectionFactory">The connection factory to generate connections from.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Database.Extensions.DbConnectionFactoryExtensions.AsGeneric(Open.Database.Extensions.IDbConnectionFactory)">
            <summary>
            Coerces a non-generic connection factory to a generic one.
            </summary>
            <param name="connectionFactory">The source connection factory.</param>
            <returns>The generic version of the source factory.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionPool">
            <summary>
            A unifying common interface for creating/managing connections. Can easily be
            used with dependency injection. Commonly a pool will simply host a single
            connection for nonconcurrent operations where giving back to the pool
            guarantees the connection returns to the state it was in before it was
            taken. Connection factories can pose as pools where taking always creates a
            new connection, and giving back always disposes.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionPool.Take">
            <summary>
            Provides a connection ready for use.  The connection state may or may not be closed depending on how the pool is being used.
            </summary>
            <returns>An <see cref="T:System.Data.IDbConnection"/>.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionPool.Give(System.Data.IDbConnection)">
            <summary>
            Gives the connection to the pool.
            Depending on implementation,
            the pool could be full,
            and the connection disposed of immediately.
            </summary>
            <param name="connection">The connection to be received by the pool.</param>
        </member>
        <member name="T:Open.Database.Extensions.IDbConnectionPool`1">
            <inheritdoc />
            <typeparam name="TConnection">The actual connection type.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.IDbConnectionPool`1.Take">
            <inheritdoc />
            <returns>An connection of type <typeparamref name="TConnection"/>.</returns>
        </member>
        <member name="T:Open.Database.Extensions.ConnectionPoolExtensions">
            <summary>
            Extensions for getting generic versions on non-generic connection pools..
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.ConnectionPoolExtensions.AsGeneric(Open.Database.Extensions.IDbConnectionPool)">
            <summary>
            Converts a non-generic connection factory to a generic one.
            </summary>
            <param name="connectionPool">The source connection factory.</param>
            <returns>The generic version of the source factory.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteCommand">
            <summary>
            Common interface used for expressive commands.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand.Execute(System.Action{System.Data.IDbCommand})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="action">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand.Execute``1(System.Func{System.Data.IDbCommand,``0})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand.ExecuteAsync(System.Func{System.Data.IDbCommand,System.Threading.Tasks.ValueTask})">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand.ExecuteAsync``1(System.Func{System.Data.IDbCommand,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Asynchronously executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteCommand`1">
            <summary>
            Common interface used for expressive commands.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand`1.Execute(System.Action{`0})">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="action">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand`1.Execute``1(System.Func{`0,``0})">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand`1.ExecuteAsync(System.Func{`0,System.Threading.Tasks.ValueTask})">
            <summary>
            Asynchronously executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for each IDataRecord.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteCommand`1.ExecuteAsync``1(System.Func{`0,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Asynchronously executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteReader">
            <summary>
            Common interface used for expressive commands when dealing with a data reader.
            </summary>
        </member>
        <member name="P:Open.Database.Extensions.IExecuteReader.CancellationToken">
            <summary>
            The cancellation token to use with supported methods.
            </summary>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader.ExecuteReader(System.Action{System.Data.IDataReader},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader.ExecuteReader``1(System.Func{System.Data.IDataReader,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader.ExecuteReaderAsync(System.Func{System.Data.IDataReader,System.Threading.Tasks.ValueTask},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader.ExecuteReaderAsync``1(System.Func{System.Data.IDataReader,System.Threading.Tasks.ValueTask{``0}},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteReader`1">
            <summary>
            Common interface used for expressive commands when dealing with a data reader.
            </summary>
            <typeparam name="TReader">The type of the data reader.</typeparam>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader`1.ExecuteReader(System.Action{`0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader`1.ExecuteReader``1(System.Func{`0,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a transform function.
            </summary>
            <typeparam name="T">The return type of the transform function.</typeparam>
            <param name="transform">The transform function for each IDataRecord.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
            <returns>The result of the transform.</returns>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader`1.ExecuteReaderAsync(System.Func{`0,System.Threading.Tasks.ValueTask},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="M:Open.Database.Extensions.IExecuteReader`1.ExecuteReaderAsync``1(System.Func{`0,System.Threading.Tasks.ValueTask{``0}},System.Data.CommandBehavior)">
            <summary>
            Executes a reader on a command with a handler function.
            </summary>
            <param name="handler">The handler function for the data reader.</param>
            <param name="behavior">The command behavior for once the command the reader is complete.</param>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteReaderAsync">
            <inheritdoc />
        </member>
        <member name="P:Open.Database.Extensions.IExecuteReaderAsync.UseAsyncRead">
            <summary>
            Indicates if reader.ReadAsync() will be used in favor of reader.Read().
            </summary>
        </member>
        <member name="T:Open.Database.Extensions.IExecuteReaderAsync`1">
            <inheritdoc />
        </member>
    </members>
</doc>
